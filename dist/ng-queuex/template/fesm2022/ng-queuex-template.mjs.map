{"version":3,"file":"ng-queuex-template.mjs","sources":["../../../../projects/ng-queuex/template/src/utils/utils.ts","../../../../projects/ng-queuex/template/src/for/for.directive.ts","../../../../projects/ng-queuex/template/src/if/if.directive.ts","../../../../projects/ng-queuex/template/src/lazy_view/lazy_view.ts","../../../../projects/ng-queuex/template/src/reactive_view/reactive_view.ts","../../../../projects/ng-queuex/template/src/switch/switch.directive.ts","../../../../projects/ng-queuex/template/src/watch/watch.directive.ts","../../../../projects/ng-queuex/template/src/template.ts","../../../../projects/ng-queuex/template/ng-queuex-template.ts"],"sourcesContent":["import { Signal } from \"@angular/core\";\r\nimport { SIGNAL } from \"@angular/core/primitives/signals\";\r\n\r\ndeclare const ngDevMode: boolean | undefined;\r\n\r\n// export function assertSignal(arg: any, propertyName: string): void {\r\n//   if (typeof arg === 'function' && arg[SIGNAL]) { return; }\r\n//   let typeName: string\r\n//   if ((typeof arg === 'object' || typeof arg === 'function') && arg !== null) {\r\n//     typeName = arg.constructor.name;\r\n//   } else {\r\n//     typeName = typeof arg;\r\n//   }\r\n//   throw new Error(`'${propertyName}' must be a signal, but received '${typeName}'`);\r\n// }\r\n\r\nexport const NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode\r\n","import { isPlatformServer } from \"@angular/common\"\r\nimport {\r\n  assertNotInReactiveContext,\r\n  computed,\r\n  Directive,\r\n  effect,\r\n  EmbeddedViewRef,\r\n  inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgIterable,\r\n  OnDestroy,\r\n  OnInit,\r\n  PLATFORM_ID,\r\n  Signal,\r\n  TemplateRef,\r\n  TrackByFunction,\r\n  ValueProvider,\r\n  ViewContainerRef,\r\n  ViewRef,\r\n} from \"@angular/core\"\r\nimport {\r\n  consumerAfterComputation,\r\n  consumerBeforeComputation,\r\n  consumerDestroy,\r\n  consumerMarkDirty,\r\n  consumerPollProducersForChange,\r\n  createSignal,\r\n  createWatch,\r\n  isInNotificationPhase,\r\n  REACTIVE_NODE, ReactiveNode,\r\n  setActiveConsumer,\r\n  Watch\r\n} from \"@angular/core/primitives/signals\"\r\nimport {\r\n  AbortTaskFunction,\r\n  AddedIterableChangeRecord,\r\n  detectChangesSync,\r\n  PriorityLevel,\r\n  PriorityName,\r\n  priorityNameToNumber,\r\n  QueuexIterableChangeOperationHandler,\r\n  QueuexIterableDiffer,\r\n  QueuexIterableDiffers,\r\n  RemovedIterableChangeRecord,\r\n  StillPresentIterableChangeRecord,\r\n  scheduleChangeDetection,\r\n  scheduleTask,\r\n  isInConcurrentTaskContext,\r\n  onTaskExecuted,\r\n  priorityInputTransform,\r\n  assertNgQueuexIntegrated,\r\n  sharedSignal,\r\n  value,\r\n  advancePriorityInputTransform,\r\n  ValueRef\r\n} from \"@ng-queuex/core\"\r\nimport { NG_DEV_MODE } from \"../utils/utils\";\r\n\r\nexport type Num =\r\n  0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\r\n  10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19\r\n  20 | 21 | 22 | 23 | 24 | 25 | 16 | 27 | 28 | 29\r\n  30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39\r\n  40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49\r\n  50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59\r\n  60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69\r\n  70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79\r\n  80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89\r\n  90 | 92 | 93 | 94 | 95 | 96 | 97 | 97 | 98 | 99;\r\n\r\n\r\nexport type Flatten<T> = T extends infer U ? U : never;\r\n\r\nexport type KeysToUse<T> = T extends Function\r\n  ? Exclude<keyof T, 'prototype' | 'arguments'>\r\n  : Exclude<keyof T, 'prototype'>;\r\n\r\nexport type PrefixedKeys<\r\n  T,\r\n  Prefix extends string = \"item\",\r\n  Seen = never\r\n> =\r\n  T extends (infer U)[]\r\n    ? | `${Prefix}.${Num}`\r\n      | PrefixedKeys<U, `${Prefix}.${Num}`, Seen>\r\n    : Flatten<{\r\n        [K in KeysToUse<T>]:\r\n          T[K] extends (infer U)[]\r\n            ? | `${Prefix}.${Extract<K, string>}`\r\n              | `${Prefix}.${Extract<K, string>}.${Num}`\r\n              | PrefixedKeys<U, `${Prefix}.${Extract<K, string>}.${Num}`, Seen>\r\n            : T[K] extends Record<string, any>\r\n              ? T[K] extends Seen\r\n                ? `${Prefix}.${Extract<K, string>}`\r\n                : | `${Prefix}.${Extract<K, string>}`\r\n                  | PrefixedKeys<T[K], `${Prefix}.${Extract<K, string>}`, Seen | T[K]>\r\n              : `${Prefix}.${Extract<K, string>}`\r\n      }[KeysToUse<T>]>;\r\n\r\n\r\nexport type TrackBy<T> = T extends object ? 'index' | 'item' | PrefixedKeys<T> : 'index' | 'item'\r\n\r\nexport type QueuexForOfInput<T, U extends NgIterable<T> = NgIterable<T>> = U & NgIterable<T> | null | undefined;\r\n\r\nconst QX_FOR_OF_DEFAULT_PRIORITY = new InjectionToken<PriorityLevel>('QX_FOR_OF_DEFAULT_PRIORITY', { factory: () => 3 /* Priority.Normal */ });\r\n\r\ninterface NgIterableItemNode<T, U extends NgIterable<T> = NgIterable<T>> extends ReactiveNode {\r\n  scheduled: boolean;\r\n  destroyed: boolean;\r\n  forOfView: ClientQueuexForOfView<T, U>;\r\n  context: ClientQueuexForOfContext<T, U>;\r\n  viewRef: ViewRef | null;\r\n  vcRef: ViewContainerRef;\r\n  tmpRef: TemplateRef<any>\r\n  run(): void;\r\n  schedule(): void;\r\n  destroy(): void;\r\n}\r\n\r\ninterface QueuexForOfView<T> extends QueuexIterableChangeOperationHandler<T> {\r\n  init(trackByFn: TrackByFunction<T>): void;\r\n  dispose(): void;\r\n}\r\n\r\ntype OmitFromNode = 'forOfView' |'destroyed' | 'scheduled' | 'hasRun' | 'context' | 'directive' | 'viewRef' | 'vcRef' | 'tmpRef';\r\n\r\nconst BASE_NG_ITERABLE_ITEM_NODE: Omit<NgIterableItemNode<any>, OmitFromNode> =\r\n  /* @__PURE__ */(() => ({\r\n    ...REACTIVE_NODE,\r\n    consumerIsAlwaysLive: true,\r\n    consumerAllowSignalWrites: false,\r\n    kind: 'effect',\r\n    consumerMarkedDirty() {\r\n      if (NG_DEV_MODE) {\r\n        assertNotInReactiveContext(() => 'Internal Error: Reactive context (THEN_NODE)!')\r\n      }\r\n      this.schedule();\r\n    },\r\n    schedule(this: NgIterableItemNode<any>) {\r\n      if (this.scheduled) { return; }\r\n      this.scheduled = true;\r\n\r\n      if (!this.forOfView.iterating) {\r\n        // For sure this is a notification from signal consumed in embedded view.\r\n        this.context._needsCheck = true;\r\n      }\r\n\r\n      const abortTask = scheduleChangeDetection(() => {\r\n        if (this.viewRef) {\r\n          if (this.context._currentIndex === -1) {\r\n            this.vcRef.remove(this.context._adjPrevIndex);\r\n            this.forOfView.shouldRunRenderCallback = true;\r\n            this.destroy();\r\n            return;\r\n          } else if (this.context._adjPrevIndex !== -1) {\r\n            this.vcRef.move(this.viewRef, this.context._currentIndex);\r\n            this.forOfView.shouldRunRenderCallback = true;\r\n          } else if (this.context._needsCheck) {\r\n            this.context._needsCheck = false;\r\n            consumerMarkDirty(this);\r\n          }\r\n        } else {\r\n          this.viewRef = this.vcRef.createEmbeddedView(this.tmpRef, this.context, this.context._currentIndex);\r\n          this.viewRef.detach();\r\n          this.forOfView.shouldRunRenderCallback = true;\r\n          consumerMarkDirty(this);\r\n        }\r\n\r\n        if (this.dirty) {\r\n          this.run();\r\n        }\r\n\r\n        this.forOfView.removeAborter(abortTask!);\r\n\r\n        this.scheduled = false;\r\n      }, this.forOfView.priorityRef.value, this.viewRef);\r\n\r\n      if (abortTask) {\r\n        abortTask.addAbortListener(() => {\r\n          this.forOfView.removeAborter(abortTask)\r\n          this.scheduled = false;\r\n        });\r\n        this.forOfView.addAborter(abortTask)\r\n      }\r\n    },\r\n    run(this: NgIterableItemNode<any>) {\r\n      if (NG_DEV_MODE && isInNotificationPhase()) {\r\n        throw new Error(`Schedulers cannot synchronously execute watches while scheduling.`);\r\n      }\r\n\r\n      this.dirty = false;\r\n      if (this.version > 0 && !consumerPollProducersForChange(this)) {\r\n      return;\r\n      }\r\n      this.version++;\r\n\r\n      if (this.version <= 0) {\r\n        this.version = 1 as any;\r\n      }\r\n\r\n      if (this.viewRef) {\r\n        const prevConsumer = consumerBeforeComputation(this);\r\n        try {\r\n          detectChangesSync(this.viewRef);\r\n        } finally {\r\n          consumerAfterComputation(this, prevConsumer);\r\n        }\r\n      }\r\n    },\r\n    destroy(this: NgIterableItemNode<any>) {\r\n      if (this.destroyed) { return; }\r\n      this.destroyed = true;\r\n      consumerDestroy(this);\r\n    }\r\n  }))()\r\n\r\nfunction createItemNode<T, U extends NgIterable<T> = NgIterable<T>>(\r\n  context: ClientQueuexForOfContext<T, U>,\r\n  forOfView: ClientQueuexForOfView<T, U>\r\n): NgIterableItemNode<T, U> {\r\n  const node = Object.create(BASE_NG_ITERABLE_ITEM_NODE) as NgIterableItemNode<T, U>;\r\n  node.context = context;\r\n  node.forOfView = forOfView;\r\n  node.vcRef = forOfView.vcRef;\r\n  node.tmpRef = forOfView.tmpRef;\r\n  node.viewRef = null;\r\n  node.destroyed = false;\r\n  node.scheduled = false;\r\n  node.dirty = false;\r\n\r\n  return node;\r\n}\r\n\r\nfunction assertValidPropertyPath(obj: any, propPath: string): void {\r\n  if (obj == null) {\r\n    throw new Error(`[qxFor][trackBy]: Tracking by property path '${propPath}' is imposable for null or undefined!`)\r\n  }\r\n\r\n  let start = 0;\r\n  let current: any = obj;\r\n\r\n  while (start < propPath.length) {\r\n    const dotIndex = propPath.indexOf(\".\", start);\r\n    const key =\r\n      dotIndex === -1 ? propPath.substring(start) : propPath.substring(start, dotIndex);\r\n\r\n    if (current == null) {\r\n      throw new Error(\r\n        `[qxFor][trackBy]: Invalid property path '${propPath}'! Property '${propPath.substring(0, start - 1)}' is null or undefined.`\r\n      );\r\n    }\r\n\r\n    current = current[key];\r\n    start = dotIndex === -1 ? propPath.length : dotIndex + 1;\r\n\r\n    if (dotIndex !== -1 && current == null) {\r\n      throw new Error(\r\n        `[qxFor][trackBy]: Invalid property path '${propPath}'! Property '${propPath.substring(0, start - 1)}' is null or undefined.`\r\n      );\r\n    }\r\n  }\r\n\r\n  if (current == null) {\r\n    console.warn(`[qxFor][trackBy]: Provided property path '${propPath}' for tracking changes is null or undefined!`)\r\n  }\r\n}\r\n\r\n/**\r\n * @description\r\n * Provides an override for `QueuexForOf` default priority.\r\n *\r\n * @param priority Valid options: `'highest' | 'high' | 'normal' | 'low' | 'lowest'`\r\n * @returns A value provider\r\n */\r\nexport function provideQueuexForOfDefaultPriority(priority: PriorityName): ValueProvider {\r\n  return { provide: QX_FOR_OF_DEFAULT_PRIORITY, useValue: priorityNameToNumber(priority, provideQueuexForOfDefaultPriority) }\r\n}\r\n\r\nexport function trackByIndex<T, U extends T>(index: number, item: U): any {\r\n  return index;\r\n}\r\n\r\nexport function trackByItem<T, U extends T>(index: number, item: U): any {\r\n  return item;\r\n}\r\n\r\nclass ClientQueuexForOfView<T, U extends NgIterable<T> = NgIterable<T>> implements QueuexForOfView<T> {\r\n\r\n  vcRef = inject(ViewContainerRef);\r\n  tmpRef = inject(TemplateRef);\r\n  differs = inject(QueuexIterableDiffers);\r\n  differ: QueuexIterableDiffer<T> | null = null\r\n  iterating = false;\r\n  rendering = false;\r\n  shouldRunRenderCallback = false;\r\n  aborting = false;\r\n  updateScheduled = false;\r\n  disposed = false;\r\n  count = 0;\r\n  aborters: AbortTaskFunction[] = [];\r\n  inputWatcher: Watch = null!;\r\n  trackByFn: TrackByFunction<T> = null!;\r\n\r\n  constructor(\r\n    public forOfDir: QueuexForOf<T, U>,\r\n    public dataSource: Signal<QueuexForOfInput<T, U>>,\r\n    public priorityRef: ValueRef<PriorityLevel>\r\n  ) { }\r\n\r\n  init(trackByFn: TrackByFunction<T>): void {\r\n    this.trackByFn = trackByFn;\r\n\r\n    this.inputWatcher = createWatch(\r\n      () => this.update(),\r\n      () => this.scheduleUpdate(),\r\n      true\r\n    );\r\n    this.inputWatcher.notify();\r\n  }\r\n\r\n  add(record: AddedIterableChangeRecord<T>): void {\r\n    const { currentIndex, item } = record;\r\n    new ClientQueuexForOfContext(\r\n      currentIndex,\r\n      this.count,\r\n      item,\r\n      this.dataSource,\r\n      this\r\n    );\r\n  }\r\n  remove(record: RemovedIterableChangeRecord<T>, adjustedIndex: number): void {\r\n    const context = (this.vcRef.get(record.previousIndex) as EmbeddedViewRef<ClientQueuexForOfContext<T, U>>).context;\r\n    context._currentIndex = -1;\r\n    context._adjPrevIndex = adjustedIndex;\r\n    context._setItem(record.item)\r\n    context._node.schedule();\r\n  }\r\n  move(record: StillPresentIterableChangeRecord<T>, adjustedPreviousIndex: number, changed: boolean): void {\r\n    const { currentIndex, item } = record;\r\n    const context = (this.vcRef.get(record.previousIndex) as EmbeddedViewRef<ClientQueuexForOfContext<T, U>>).context;\r\n    context._currentIndex = currentIndex;\r\n    context._adjPrevIndex = adjustedPreviousIndex;\r\n    context._setIndex(currentIndex);\r\n    context._setCount(this.count);\r\n    context._setItem(item);\r\n    context._node.schedule()\r\n  }\r\n  noop(record: StillPresentIterableChangeRecord<T>, changed: boolean): void {\r\n    const { currentIndex, item } = record;\r\n    const context = (this.vcRef.get(record.previousIndex) as EmbeddedViewRef<ClientQueuexForOfContext<T, U>>).context;\r\n    context._currentIndex = currentIndex;\r\n    context._adjPrevIndex = -1\r\n    context._setIndex(currentIndex);\r\n    context._setCount(this.count);\r\n    context._setItem(item);\r\n    context._node.schedule()\r\n  }\r\n  done(): void {\r\n    const abortTask = scheduleTask(() => {\r\n      this.rendering = false;\r\n      if (this.shouldRunRenderCallback) {\r\n        this.shouldRunRenderCallback = false;\r\n        this.forOfDir.qxForRenderCallback?.(this.dataSource());\r\n      }\r\n    }, this.priorityRef.value);\r\n\r\n    this.addAborter(abortTask);\r\n  }\r\n\r\n  update(): void {\r\n    const data = this.dataSource();\r\n    const prevConsumer = setActiveConsumer(null)\r\n    try {\r\n      if (!this.differ && data) {\r\n        this.differ = this.differs.find(data).create(this.trackByFn);\r\n      }\r\n\r\n      if (this.differ) {\r\n        if (this.rendering) {\r\n          const currentState = [];\r\n          for (let i = 0; i < this.vcRef.length; i++) {\r\n            const context = (this.vcRef.get(i) as EmbeddedViewRef<ClientQueuexForOfContext<T, U>>).context;\r\n            context._currentIndex = i;\r\n            context._adjPrevIndex = -1;\r\n            context._setIndex(i);\r\n            currentState[i] = context.$implicit();\r\n          }\r\n          this.differ.diff(currentState);\r\n        }\r\n        this.abort();\r\n\r\n        const changes = this.differ.diff(data);\r\n        if (changes) {\r\n          this.rendering = true;\r\n          this.iterating = true;\r\n          this.count = changes.length\r\n          changes.applyOperations(this);\r\n          this.iterating = false;\r\n        } else if (this.rendering) {\r\n          this.done();\r\n        }\r\n      }\r\n    } finally {\r\n      setActiveConsumer(prevConsumer);\r\n      this.updateScheduled = false\r\n    }\r\n  }\r\n\r\n  scheduleUpdate(): void {\r\n    if (this.updateScheduled) { return; }\r\n    this.updateScheduled = true;\r\n\r\n    if (isInConcurrentTaskContext()) {\r\n      onTaskExecuted(() => {\r\n        if (this.disposed) { return; }\r\n        this.inputWatcher.run();\r\n      });\r\n    } else {\r\n      scheduleTask(() => this.inputWatcher.run(), 1/* Highest */);\r\n    }\r\n  }\r\n\r\n  abort(): void {\r\n    this.aborting = true;\r\n    while(this.aborters.length) {\r\n      this.aborters.shift()!();\r\n    }\r\n    this.aborting = false;\r\n  }\r\n\r\n  addAborter(abortTask: AbortTaskFunction): void {\r\n    this.aborters.push(abortTask);\r\n  }\r\n\r\n  removeAborter(abortTask: AbortTaskFunction): void {\r\n    if (this.aborting) { return; }\r\n    const index = this.aborters.indexOf(abortTask);\r\n    if (index > -1) {\r\n      this.aborters.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  dispose(): void {\r\n    this.disposed = true;\r\n    this.abort();\r\n    for (let i = 0; i < this.vcRef.length; i++) {\r\n      (this.vcRef.get(i) as EmbeddedViewRef<ClientQueuexForOfContext<T, U>>).context._node.destroy();\r\n    }\r\n  }\r\n}\r\n\r\nclass ServerQueuexForOfView<T, U extends NgIterable<T> = NgIterable<T>> implements QueuexForOfView<T> {\r\n\r\n  private _vcRef = inject(ViewContainerRef);\r\n  private _tmpRef = inject(TemplateRef);\r\n  private _differs = inject(QueuexIterableDiffers);\r\n  private _differ: QueuexIterableDiffer<T> | null = null;\r\n  private _count: number = 0;\r\n  private _trackByFn: TrackByFunction<T> = null!\r\n\r\n  constructor(\r\n    private _dataSource: Signal<QueuexForOfInput<T, U>>\r\n  ) {\r\n    effect(() => {\r\n      this._update(this._dataSource());\r\n    });\r\n  }\r\n\r\n  add(record: AddedIterableChangeRecord<T>): void {\r\n    const { currentIndex, item } = record\r\n    const context = new ServerQueuexForOfContext(\r\n      currentIndex,\r\n      this._count,\r\n      item,\r\n      this._dataSource\r\n    )\r\n    this._vcRef.createEmbeddedView(this._tmpRef, context, currentIndex);\r\n  }\r\n\r\n  remove(_: RemovedIterableChangeRecord<T>, adjustedIndex: number): void {\r\n    this._vcRef.remove(adjustedIndex);\r\n  }\r\n\r\n  move(record: StillPresentIterableChangeRecord<T>, adjustedPreviousIndex: number): void {\r\n    const { item, currentIndex } = record\r\n    const viewRef = this._vcRef.get(adjustedPreviousIndex) as EmbeddedViewRef<ServerQueuexForOfContext<T, U>>;\r\n    this._vcRef.move(viewRef, currentIndex);\r\n    this._updateContext(viewRef.context, currentIndex, item)\r\n  }\r\n\r\n  noop(record: StillPresentIterableChangeRecord<T>): void {\r\n    const { item, currentIndex } = record;\r\n    const viewRef = this._vcRef.get(currentIndex) as EmbeddedViewRef<ServerQueuexForOfContext<T, U>>;\r\n    this._updateContext(viewRef.context, currentIndex, item);\r\n  }\r\n\r\n  done(): void { /* noop */ }\r\n\r\n  init(trackByFn: TrackByFunction<T>): void {\r\n    this._trackByFn = trackByFn;\r\n  }\r\n\r\n  dispose(): void { /* noop */ }\r\n\r\n  _update(data: QueuexForOfInput<T, U>): void {\r\n    if (!this._differ && data) {\r\n      this._differ = this._differs.find(data).create(this._trackByFn);\r\n    }\r\n\r\n    if (this._differ) {\r\n      const changes = this._differ.diff(data);\r\n      if (changes) {\r\n        this._count = changes.length;\r\n        changes.applyOperations(this);\r\n      }\r\n    }\r\n  }\r\n\r\n  _updateContext(context: ServerQueuexForOfContext<T, U>, index: number, item: T): void {\r\n    context._setIndex(index);\r\n    context._setItem(item);\r\n    context._setCount(this._count);\r\n  }\r\n}\r\n\r\n/**\r\n * @Directive QueuexForOf\r\n *\r\n * This directive serves as a modern, high-performance replacement for Angular’s built-in `NgForOf` **(restricted to immutable objects)**. It leverages a concurrent scheduling\r\n * mechanism to transform immutable data collections into fully synchronized UI views while seamlessly managing local change detection within embedded views.\r\n * Unlike traditional approaches, every signal change read directly in the template automatically triggers its own localized change detection cycle.\r\n *\r\n * What makes this unique is that these updates are completely independent — they do not rely on the host component’s change detection, nor are they tied\r\n * to Angular’s global change detection cycles. Instead, each embedded view is deliberately detached from the logical tree and operates within its own dedicated\r\n * reactive context. This architecture not only improves rendering efficiency and responsiveness but also empowers developers to build highly dynamic, scalable interfaces\r\n * that remain smooth and predictable, even under heavy data or interaction loads.\r\n *\r\n * In addition, the directive introduces a streamlined approach to configuring `trackBy`, making it both easier to use and more powerful thanks to advanced autocompletion support.\r\n * Instead of writing verbose functions, developers can simply reference built-in identifiers such as `index` or `item`, or directly target object properties using the `item.` prefix.\r\n * For instance, given a `Person { id: number; name: string; age: number }` interface, the `trackBy` input can be set to `index`, item, or `item.id`. This not only reduces boilerplate\r\n * code but also improves developer productivity by offering intelligent suggestions right inside the editor.\r\n *\r\n * ### Server side fallback\r\n *\r\n * On the server side, the directive behaves just like Angular’s native NgForOf. The advanced features designed for client-side rendering — such as concurrent scheduling,\r\n * localized change detection, and reactive embedded contexts — are not only unnecessary during server-side rendering but could even introduce unwanted overhead. By falling back\r\n * to the simpler NgForOf behavior, the directive ensures optimal performance in SSR scenarios, producing clean, predictable HTML output without sacrificing rendering speed or efficiency.\r\n *\r\n * ### Inputs\r\n *\r\n * ```ts\r\n * // A collection of data for display.\r\n * *@Input({ required: true })\r\n *  set qxForOf(data: QueuexForOfInput<T, U> | Signal<QueuexForOfInput<T, U>> )\r\n *\r\n * //A priority for concurrent scheduler to manage views.\r\n * *@Input({ transform: advancePriorityInputTransform })\r\n *  set qxForPriority(priority: PriorityLevel | Signal<PriorityLevel>);\r\n *\r\n * //A strategy for tracking changes in collection what can improve user experience (e.g. 'item', 'index', 'item.id').\r\n * *@Input({ required: true })\r\n * set qxForTrackBy(trackBy: TrackBy<T>)\r\n *\r\n *\r\n * //A hook what will be used in browser where at least one view gets created, destroyed or moved\r\n * *@Input()\r\n * qxForOfRenderCallback: ((data: QueuexForOfInput<T, U>) => void) | null;\r\n * ```\r\n *\r\n * ### Context variables\r\n *\r\n * ```ts\r\n *  interface QueuexForOfContext<T, U extends NgIterable<T> = NgIterable<T>> {\r\n *\r\n *    readonly $implicit: Signal<T>;\r\n *    readonly qxForOf: Signal<QueuexForOfInput<T, U>>;\r\n *    readonly index: Signal<number>;\r\n *    readonly count: Signal<number>;\r\n *    readonly first: Signal<boolean>;\r\n *    readonly last: Signal<boolean>;\r\n *    readonly even: Signal<boolean>;\r\n *    readonly odd: Signal<boolean>;\r\n *\r\n *  }\r\n * ```\r\n */\r\n@Directive({ selector: 'ng-template[qxFor]' })\r\nexport class QueuexForOf<T, U extends NgIterable<T> = NgIterable<T>> implements OnInit, OnDestroy {\r\n\r\n  private _trackBy: TrackByFunction<T> = null!;\r\n  private _itemPropPath: string = undefined!;\r\n  private _view: QueuexForOfView<T> = null!;\r\n  private _dataSource = sharedSignal<QueuexForOfInput<T, U>>(undefined, NG_DEV_MODE ? 'qxForOf' : undefined);\r\n  private _priorityRef = value<PriorityLevel>(inject(QX_FOR_OF_DEFAULT_PRIORITY), NG_DEV_MODE ? 'qxForOfPriority' : undefined);\r\n\r\n  /**\r\n   * A priority for concurrent scheduler to manage views. It can be set as numeric value (1-5) or as\r\n   * string literal with valid options: `'highest' | 'high' | 'normal' | 'low' | 'lowest'`. Default is normal (3).\r\n   *\r\n   * This input also accepts the signal of the previously mentioned values\r\n   */\r\n  @Input({ transform: advancePriorityInputTransform }) set qxForPriority(priority: PriorityLevel | Signal<PriorityLevel>) {\r\n    this._priorityRef.set(priority);\r\n  }\r\n\r\n  /**\r\n   * A collection of data for display.\r\n   */\r\n  @Input({ required: true }) set qxForOf(data: QueuexForOfInput<T, U> | Signal<QueuexForOfInput<T, U>>) {\r\n    this._dataSource.set(data);\r\n  }\r\n\r\n  /**\r\n   * A strategy for tracking changes in collection what can improve user experience.\r\n   *\r\n   * When items are added, moved, or removed in the iterable, the directive must re-render the appropriate DOM nodes.\r\n   * To minimize churn in the DOM, only nodes that have changed are re-rendered.\r\n   *\r\n   * If is set to `index`, each item will be compared by index position.\r\n   *\r\n   * If is set to item, each item will be compared by strick equality (===).\r\n   *\r\n   * If item contains a uniq identifier (e.g `{ id: string }`), it is preferred to use that for comparison\r\n   * by setting `trackBy: 'item.id'`.\r\n   *\r\n   * @throws Error if invalid string value is provided.\r\n   */\r\n  @Input({ required: true }) set qxForTrackBy(trackBy: TrackBy<T>) {\r\n    if (this._trackBy as any) {\r\n      throw new Error('[qxFor] \"trackBy\" can not be provided more then once!');\r\n    }\r\n    if (trackBy === 'index') {\r\n      this._trackBy = trackByIndex;\r\n      return;\r\n    }\r\n    if (trackBy === 'item') {\r\n      this._trackBy = trackByItem;\r\n      return;\r\n    }\r\n    if (trackBy.startsWith('item.')) {\r\n      if (trackBy.includes('..')) {\r\n        throw new Error(`[qxFor][trackBy]: Provided value '${trackBy}' is incorrect format of property patch because of '..'!`);\r\n      }\r\n\r\n      this._itemPropPath = trackBy.substring(5);\r\n      this._trackBy = (function (this: QueuexForOf<T,U>, index: number, item: T) {\r\n        if (NG_DEV_MODE) {\r\n          assertValidPropertyPath(item, this._itemPropPath);\r\n        }\r\n        return (item as any)[this._itemPropPath];\r\n      }).bind(this);\r\n      return;\r\n    }\r\n\r\n    throw new Error(\r\n      '[qxFor][trackBy]: Incorrect value provided to \"trackBy\" function! It only accepts \\'index\\', \\'item\\' ' +\r\n      'or any value of type string prefixed with \\'item.\\' where it should be a path to property. For example ' +\r\n      'if item is an instance of class Person { id: string, name: string } you should provide \\'item.id\\'.'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * A callback what will be called when at least one of the template gets created, removed or moved. This enables developers to perform actions when rendering has been done.\r\n   * The `qxForOfRenderCallback` is useful in situations where you rely on specific DOM properties like the dimensions of an item after it got rendered.\r\n   *\r\n   * The `qxForOfRenderCallback` emits the latest value causing the view to update.\r\n   */\r\n  @Input() qxForRenderCallback: ((data: QueuexForOfInput<T, U>) => void) | null = null;\r\n\r\n  constructor() {\r\n    assertNgQueuexIntegrated('[qxFor]: Assertion failed! \"@ng-queuex/core\" integration not provided!');\r\n    if (isPlatformServer(inject(PLATFORM_ID))) {\r\n      this._view = new ServerQueuexForOfView(this._dataSource.ref);\r\n    } else {\r\n      this._view = new ClientQueuexForOfView(this, this._dataSource.ref, this._priorityRef)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this._view.init(this._trackBy);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnDestroy(): void {\r\n    this._view.dispose();\r\n  }\r\n\r\n  static ngTemplateContextGuard<T, U extends NgIterable<T>>(dir: QueuexForOf<T, U>, ctx: any): ctx is QueuexForOfContext<T, U> {\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\nexport interface QueuexForOfContext<T, U extends NgIterable<T> = NgIterable<T>> {\r\n  readonly $implicit: Signal<T>;\r\n  readonly qxForOf: Signal<QueuexForOfInput<T, U>>;\r\n  readonly index: Signal<number>;\r\n  readonly count: Signal<number>;\r\n  readonly first: Signal<boolean>;\r\n  readonly last: Signal<boolean>;\r\n  readonly even: Signal<boolean>;\r\n  readonly odd: Signal<boolean>;\r\n}\r\n\r\nclass ServerQueuexForOfContext<T, U extends NgIterable<T> = NgIterable<T>> implements QueuexForOfContext<T, U> {\r\n\r\n  readonly $implicit: Signal<T>\r\n  readonly qxForOf: Signal<QueuexForOfInput<T, U>>\r\n  readonly index: Signal<number>\r\n  readonly count: Signal<number>\r\n  readonly first: Signal<boolean>\r\n  readonly last: Signal<boolean>\r\n  readonly even: Signal<boolean>\r\n  readonly odd: Signal<boolean>\r\n\r\n  readonly _setIndex: (index: number) => void;\r\n  readonly _setCount: (count: number) => void;\r\n  readonly _setItem: (item: T) => void;\r\n\r\n  constructor(\r\n    index: number,\r\n    count: number,\r\n    item: T,\r\n    qxForOf: Signal<QueuexForOfInput<T, U>>\r\n  ) {\r\n    const [indexGetFn, indexSetFn] = createSignal(index) as unknown as [any, any];\r\n    this.index = indexGetFn;\r\n    this._setIndex = indexSetFn;\r\n\r\n    const [countGetFn, countSetFn] = createSignal(count) as unknown as [any, any];\r\n    this.count = countGetFn;\r\n    this._setCount = countSetFn;\r\n\r\n    const [itemGetFn, itemSetFn] = createSignal(item) as unknown as [any, any];\r\n    this.$implicit = itemGetFn;\r\n    this._setItem = itemSetFn;\r\n\r\n    this.qxForOf = qxForOf;\r\n\r\n    this.first = computed(() => this.index() === 0);\r\n    this.last = computed(() => this.index() === this.count() - 1);\r\n    this.even = computed(() => this.index() % 2 === 0);\r\n    this.odd = computed(() => this.index() % 2 !== 0);\r\n\r\n    if (NG_DEV_MODE) {\r\n\r\n      indexGetFn.toString = () => `[Signal: ${indexGetFn()}]`;\r\n      indexGetFn.debugName = 'QueuexFotOfContextIndexSignal';\r\n\r\n      countGetFn.toString = () => `[Signal: ${countGetFn()}]`;\r\n      countGetFn.debugName = 'QueuexFotOfContextCountSignal';\r\n\r\n      itemGetFn.toString = () => `[Signal: ${itemGetFn()}]`;\r\n      itemGetFn.debugName = 'QueuexFotOfContextItemSignal'\r\n    }\r\n  }\r\n}\r\n\r\nclass ClientQueuexForOfContext<T, U extends NgIterable<T> = NgIterable<T>> extends ServerQueuexForOfContext<T, U> {\r\n\r\n  _currentIndex: number;\r\n  _adjPrevIndex = -1;\r\n  _needsCheck = false;\r\n  _node: NgIterableItemNode<T, U>;\r\n\r\n  constructor(\r\n    index: number,\r\n    count: number,\r\n    item: T,\r\n    qxForOf: Signal<QueuexForOfInput<T, U>>,\r\n    forOfView: ClientQueuexForOfView<T, U>\r\n  ) {\r\n    super(index, count, item, qxForOf);\r\n    this._currentIndex = index;\r\n    this._node = createItemNode(this, forOfView);\r\n    consumerMarkDirty(this._node);\r\n  }\r\n}\r\n\r\n\r\n","import { isPlatformBrowser } from \"@angular/common\";\r\nimport {\r\n  assertNotInReactiveContext,\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  effect,\r\n  EmbeddedViewRef,\r\n  inject,\r\n  InjectionToken,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  PLATFORM_ID,\r\n  Signal,\r\n  TemplateRef,\r\n  ValueProvider,\r\n  ViewContainerRef,\r\n} from \"@angular/core\";\r\nimport {\r\n  consumerAfterComputation,\r\n  consumerBeforeComputation,\r\n  consumerDestroy,\r\n  consumerMarkDirty,\r\n  consumerPollProducersForChange,\r\n  createWatch,\r\n  isInNotificationPhase,\r\n  REACTIVE_NODE,\r\n  ReactiveNode,\r\n  setActiveConsumer,\r\n  Watch\r\n} from \"@angular/core/primitives/signals\";\r\nimport {\r\n  PriorityLevel,\r\n  assertNgQueuexIntegrated,\r\n  PriorityName,\r\n  priorityNameToNumber,\r\n  scheduleChangeDetection,\r\n  AbortTaskFunction,\r\n  detectChangesSync,\r\n  isInConcurrentTaskContext,\r\n  onTaskExecuted,\r\n  scheduleTask,\r\n  ValueRef,\r\n  sharedSignal,\r\n  value,\r\n  advancePriorityInputTransform\r\n} from \"@ng-queuex/core\";\r\nimport { NG_DEV_MODE } from \"../utils/utils\";\r\n\r\ninterface QxIfView<T = unknown> {\r\n  init(context: QueuexIfContext<T>): void\r\n  dispose(): void;\r\n}\r\n\r\ninterface QueuexIfEffectNode<T = unknown> extends ReactiveNode {\r\n  view: ClientQxIfView;\r\n  scheduled: boolean;\r\n  destroyed: boolean;\r\n  run(): void;\r\n  schedule(): void;\r\n  destroy(): void;\r\n  abortTask: AbortTaskFunction | null;\r\n  tmpRef: TemplateRef<T> | null;\r\n  renderCbShouldRun: boolean;\r\n}\r\n\r\nconst BASE_THEN_QUEUEX_EFFECT_NODE: Omit<QueuexIfEffectNode, 'view' | 'destroyed' |  'scheduled' | 'hasRun' | 'abortTask' | 'tmpRef' | 'renderCbShouldRun'> =\r\n  /* @__PURE__ */ (() => ({\r\n    ...REACTIVE_NODE,\r\n    consumerIsAlwaysLive: true,\r\n    consumerAllowSignalWrites: false,\r\n    kind: 'effect',\r\n    abortTask: null,\r\n    consumerMarkedDirty(this: QueuexIfEffectNode) {\r\n      if (NG_DEV_MODE) {\r\n        assertNotInReactiveContext(() => 'Internal Error: Reactive context (THEN_NODE)!')\r\n      }\r\n      this.schedule();\r\n    },\r\n    schedule(this: QueuexIfEffectNode) {\r\n      if (NG_DEV_MODE) {\r\n        assertNotInReactiveContext(() => 'Internal Error: Reactive context (THEN_NODE)!')\r\n      }\r\n\r\n      if (this.destroyed || this.scheduled) { return; }\r\n      this.scheduled = true;\r\n\r\n      this.abortTask = scheduleChangeDetection(() => {\r\n        if (this.destroyed) { return; }\r\n\r\n\r\n        let thenViewRef = this.view.thenViewRef;\r\n        const vcRef = this.view.vcRef;\r\n\r\n        if (this.tmpRef !== this.view.thenTmpRef) {\r\n          this.tmpRef = this.view.thenTmpRef;\r\n          if (thenViewRef) {\r\n            const index = vcRef.indexOf(thenViewRef);\r\n            vcRef.remove(index);\r\n            this.view.thenViewRef = null;\r\n            thenViewRef = null;\r\n            this.renderCbShouldRun = true;\r\n          }\r\n        }\r\n\r\n        if (this.view.context.$implicit()) {\r\n          if (!thenViewRef) {\r\n            this.view.thenViewRef = vcRef.createEmbeddedView(\r\n              this.view.thenTmpRef,\r\n              this.view.context\r\n            );\r\n            this.view.thenViewRef.detach();\r\n            consumerMarkDirty(this);\r\n            this.renderCbShouldRun = true;\r\n          }\r\n        } else {\r\n          if (thenViewRef) {\r\n            const index = vcRef.indexOf(thenViewRef)\r\n            vcRef.remove(index);\r\n            this.view.thenViewRef = null;\r\n            this.renderCbShouldRun = true;\r\n          }\r\n        }\r\n\r\n        if (this.dirty) {\r\n          this.run();\r\n        }\r\n\r\n        this.scheduled = false;\r\n      }, this.view.priorityRef.value, this.view.thenViewRef);\r\n    },\r\n    run(this: QueuexIfEffectNode) {\r\n      if (NG_DEV_MODE && isInNotificationPhase()) {\r\n        throw new Error(`Schedulers cannot synchronously execute watches while scheduling.`);\r\n      }\r\n\r\n      this.dirty = false;\r\n      if (this.version > 0 && !consumerPollProducersForChange(this)) {\r\n      return;\r\n      }\r\n      this.version++\r\n\r\n      if (this.version <= 0) {\r\n        this.version = 1 as any;\r\n      }\r\n\r\n      const viewRef = this.view.thenViewRef;\r\n\r\n      if (viewRef) {\r\n        const prevConsumer = consumerBeforeComputation(this);\r\n        try {\r\n          detectChangesSync(viewRef);\r\n        } finally {\r\n          consumerAfterComputation(this, prevConsumer);\r\n        }\r\n      }\r\n    },\r\n    destroy(this: QueuexIfEffectNode) {\r\n      if (this.destroyed) { return; }\r\n      this.destroyed = true;\r\n      consumerDestroy(this);\r\n      this.abortTask?.()\r\n    }\r\n  }))();\r\n\r\n  const BASE_ELSE_QUEUEX_EFFECT_NODE: Omit<QueuexIfEffectNode, 'view' | 'destroyed' |  'scheduled' | 'shouldRerender' | 'hasRun' | 'abortTask' | 'tmpRef' | 'renderCbShouldRun'> =\r\n  /* @__PURE__ */ (() => ({\r\n    ...REACTIVE_NODE,\r\n    consumerIsAlwaysLive: true,\r\n    consumerAllowSignalWrites: false,\r\n    kind: 'effect',\r\n    consumerMarkedDirty(this: QueuexIfEffectNode) {\r\n      if (NG_DEV_MODE) {\r\n        assertNotInReactiveContext(() => 'Internal Error: Reactive context (ELSE_NODE)!')\r\n      }\r\n      this.schedule();\r\n    },\r\n    schedule(this: QueuexIfEffectNode) {\r\n      if (NG_DEV_MODE) {\r\n        assertNotInReactiveContext(() => 'Internal Error: Reactive context (ELSE_NODE)!')\r\n      }\r\n\r\n      if (this.destroyed || this.scheduled) { return; }\r\n      this.scheduled = true;\r\n\r\n      this.abortTask = scheduleChangeDetection(() => {\r\n        if (this.destroyed) { return; }\r\n\r\n        let elseViewRef = this.view.elseViewRef;\r\n        const vcRef = this.view.vcRef;\r\n\r\n        if (this.tmpRef !== this.view.elseTmpRef) {\r\n          this.tmpRef = this.view.elseTmpRef\r\n          if (elseViewRef) {\r\n            const index = vcRef.indexOf(elseViewRef);\r\n            vcRef.remove(index);\r\n            this.view.elseViewRef = null;\r\n            elseViewRef = null;\r\n            this.renderCbShouldRun = true;\r\n          }\r\n        }\r\n\r\n        if (this.view.context.$implicit()) {\r\n          if (elseViewRef) {\r\n            const index = vcRef.indexOf(elseViewRef)\r\n            vcRef.remove(index);\r\n            this.view.elseViewRef = null;\r\n            this.renderCbShouldRun = true;\r\n          }\r\n        } else {\r\n          if (!elseViewRef && this.view.elseTmpRef) {\r\n            this.view.elseViewRef = vcRef.createEmbeddedView(\r\n              this.view.elseTmpRef,\r\n              this.view.context\r\n            );\r\n            this.view.elseViewRef.detach();\r\n            consumerMarkDirty(this);\r\n            this.renderCbShouldRun = true;\r\n          }\r\n        }\r\n\r\n        if (this.dirty) {\r\n          this.run();\r\n        }\r\n\r\n        this.scheduled = false;\r\n      }, this.view.priorityRef.value, this.view.elseViewRef);\r\n    },\r\n    run(this: QueuexIfEffectNode) {\r\n      if (NG_DEV_MODE && isInNotificationPhase()) {\r\n        throw new Error(`Schedulers cannot synchronously execute watches while scheduling.`);\r\n      }\r\n\r\n      this.dirty = false;\r\n      if (this.version > 0 && !consumerPollProducersForChange(this)) {\r\n      return;\r\n      }\r\n      this.version++;\r\n\r\n      if (this.version <= 0) {\r\n        this.version = 1 as any;\r\n      }\r\n\r\n      const viewRef = this.view.elseViewRef;\r\n\r\n      if (viewRef) {\r\n        const prevConsumer = consumerBeforeComputation(this);\r\n        try {\r\n          detectChangesSync(viewRef);\r\n        } finally {\r\n          consumerAfterComputation(this, prevConsumer);\r\n        }\r\n      }\r\n    },\r\n    destroy(this: QueuexIfEffectNode) {\r\n      if (this.destroyed) { return; }\r\n      this.destroyed = true;\r\n      consumerDestroy(this)\r\n      this.abortTask?.()\r\n    }\r\n  }))();\r\n\r\n  function createThenNode<T = unknown>(view: ClientQxIfView<T>): QueuexIfEffectNode<T> {\r\n    const node = Object.create(BASE_THEN_QUEUEX_EFFECT_NODE) as QueuexIfEffectNode<any>\r\n    node.view = view as any;\r\n    node.abortTask = null;\r\n    node.destroyed = false;\r\n    node.scheduled = false;\r\n    node.dirty = false;\r\n    node.tmpRef = null;\r\n    node.renderCbShouldRun = false\r\n    return node;\r\n  }\r\n\r\n  function createElseNode<T = unknown>(view: ClientQxIfView<T>): QueuexIfEffectNode<T> {\r\n    const node = Object.create(BASE_ELSE_QUEUEX_EFFECT_NODE) as QueuexIfEffectNode<T>\r\n    node.view = view as any;\r\n    node.abortTask = null;\r\n    node.destroyed = false;\r\n    node.scheduled = false;\r\n    node.dirty = false;\r\n    node.tmpRef = null;\r\n    node.renderCbShouldRun = false\r\n    return node;\r\n  }\r\n\r\nconst QX_IF_DEFAULT_PRIORITY = new InjectionToken<PriorityLevel>('QX_IF_DEFAULT_PRIORITY', { factory: () => 3 /* Priority.Normal */ });\r\n\r\n/**\r\n * @description\r\n * Provides an override for `QueuexIf` default priority.\r\n *\r\n * @param priority Valid options: `'highest' | 'high' | 'normal' | 'low' | 'lowest'`\r\n * @returns A value provider\r\n */\r\nexport function provideQueuexIfDefaultPriority(priority: PriorityName): ValueProvider {\r\n  return { provide: QX_IF_DEFAULT_PRIORITY, useValue: priorityNameToNumber(priority, provideQueuexIfDefaultPriority) }\r\n}\r\n\r\nclass ClientQxIfView<T = unknown> implements QxIfView<T> {\r\n\r\n  context: QueuexIfContext<T> = null!;\r\n  inputWatcher: Watch | null = null;\r\n  thenNode: QueuexIfEffectNode<T> = null!;\r\n  elseNode: QueuexIfEffectNode<T> = null!;\r\n  thenViewRef: EmbeddedViewRef<QueuexIfContext<T>> | null = null;\r\n  elseViewRef: EmbeddedViewRef<QueuexIfContext<T>> | null = null;\r\n  thenTmpRef: TemplateRef<QueuexIfContext<T>>;\r\n  elseTmpRef: TemplateRef<QueuexIfContext<T>> | null = null;\r\n  vcRef = inject(ViewContainerRef)\r\n  disposed = false;\r\n  abortTask: AbortTaskFunction | null = null;\r\n  renderCallbackAbortTask: AbortTaskFunction | null = null;\r\n  renderCallbackScheduled = false;\r\n  inputWatchScheduled = false;\r\n\r\n  constructor(\r\n    public ifDir: QueuexIf<T>,\r\n    public thenTmpRefSource: Signal<TemplateRef<QueuexIfContext<T>>>,\r\n    public elseTmpRefSource: Signal<TemplateRef<QueuexIfContext<T>> | null>,\r\n    public priorityRef: ValueRef<PriorityLevel>\r\n  ) {\r\n    this.thenTmpRef = thenTmpRefSource()\r\n  }\r\n\r\n  init(context: QueuexIfContext<T>): void {\r\n    this.context = context;\r\n\r\n    this.inputWatcher = createWatch(\r\n      () => this.inputWatchCallback(),\r\n      () => this.scheduleInputWatchCallback(),\r\n      false\r\n    );\r\n\r\n    this.thenNode = createThenNode(this);\r\n    this.elseNode = createElseNode(this);\r\n\r\n    this.inputWatcher.notify();\r\n  }\r\n\r\n  inputWatchCallback(): void {\r\n    this.context.$implicit();\r\n    this.thenTmpRef = assertTemplateRef(this.thenTmpRefSource(), 'qxIfThen')\r\n    this.elseTmpRef = assertTemplateRef(this.elseTmpRefSource(), 'qxIfElse')\r\n\r\n    const prevConsumer = setActiveConsumer(null);\r\n    try {\r\n      this.thenNode.schedule();\r\n      this.elseNode.schedule();\r\n    } finally {\r\n      setActiveConsumer(prevConsumer);\r\n    }\r\n    this.scheduleRenderCallback();\r\n    this.inputWatchScheduled = false;\r\n  }\r\n\r\n  scheduleInputWatchCallback(): void {\r\n    if (this.inputWatchScheduled) { return; }\r\n    this.inputWatchScheduled = true;\r\n\r\n    if (isInConcurrentTaskContext()) {\r\n      onTaskExecuted(() => {\r\n        if (this.disposed) { return; }\r\n        this.inputWatcher!.run();\r\n      });\r\n    } else {\r\n      this.abortTask = scheduleTask(\r\n        () => this.inputWatcher!.run(),\r\n        1 //Highest\r\n      );\r\n    }\r\n  }\r\n\r\n  scheduleRenderCallback() {\r\n    if (this.renderCallbackScheduled) { return; }\r\n    this.renderCallbackScheduled = true\r\n\r\n    this.renderCallbackAbortTask = scheduleTask(() => {\r\n      if (this.thenNode.renderCbShouldRun || this.elseNode.renderCbShouldRun) {\r\n        this.ifDir.qxIfRenderCallback?.(this.context.$implicit())\r\n        this.thenNode.renderCbShouldRun = this.elseNode.renderCbShouldRun = false;\r\n      }\r\n      this.renderCallbackScheduled = false;\r\n    });\r\n  }\r\n\r\n  dispose(): void {\r\n    this.disposed = true;\r\n    this.abortTask?.();\r\n    this.renderCallbackAbortTask?.()\r\n    this.inputWatcher?.destroy();\r\n    this.thenNode?.destroy();\r\n    this.elseNode?.destroy();\r\n  }\r\n}\r\n\r\nclass ServerQxIfView<T = unknown> implements QxIfView {\r\n\r\n  context: QueuexIfContext<T> = null!;\r\n  thenViewRef: EmbeddedViewRef<QueuexIfContext<T>> | null = null;\r\n  elseViewRef: EmbeddedViewRef<QueuexIfContext<T>> | null = null;\r\n  thenTmpRef: TemplateRef<QueuexIfContext<T>> | null = null;\r\n  elseTmpRef: TemplateRef<QueuexIfContext<T>> | null = null;\r\n  vcRef = inject(ViewContainerRef);\r\n  cdRef = inject(ChangeDetectorRef);\r\n  value: any\r\n  directiveIsInit = false;\r\n\r\n  constructor(\r\n    thenTmpRefSource: Signal<TemplateRef<QueuexIfContext<T>>>,\r\n    elseTmpRefSource: Signal<TemplateRef<QueuexIfContext<T>> | null>,\r\n  ) {\r\n\r\n    effect(() => {\r\n      this.value = this.context.$implicit()\r\n      this.update(\r\n        this.value,\r\n        assertTemplateRef(thenTmpRefSource(), 'qxIfThen'),\r\n        assertTemplateRef(elseTmpRefSource(), 'qxIfElse')\r\n      );\r\n    })\r\n  }\r\n\r\n  init(context: QueuexIfContext<T>): void {\r\n    this.context = context;\r\n  }\r\n\r\n  private update(\r\n    value: T,\r\n    thenTmpRef: TemplateRef<QueuexIfContext<T>>,\r\n    elseTmpRef: TemplateRef<QueuexIfContext<T>> | null\r\n  ): void {\r\n    if (this.thenTmpRef !== thenTmpRef) {\r\n      this.thenTmpRef = thenTmpRef;\r\n      this.thenViewRef = null;\r\n    }\r\n\r\n    if (this.elseTmpRef !== elseTmpRef) {\r\n      this.elseTmpRef = elseTmpRef;\r\n      this.elseViewRef = null;\r\n    }\r\n\r\n    if (value) {\r\n      if (!this.thenViewRef) {\r\n        this.vcRef.clear();\r\n        this.elseViewRef = null;\r\n        this.thenViewRef = this.vcRef.createEmbeddedView(\r\n          this.thenTmpRef,\r\n          this.context\r\n        );\r\n      }\r\n    } else {\r\n      if (!this.elseViewRef) {\r\n        this.vcRef.clear();\r\n        this.thenViewRef = null;\r\n        if (this.elseTmpRef) {\r\n          this.elseViewRef = this.vcRef.createEmbeddedView(\r\n            this.elseTmpRef,\r\n            this.context\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  dispose(): void { /* noop */ }\r\n}\r\n\r\n/**\r\n * @Directive QueuexIf\r\n *\r\n * The `QueuexIf` directive is a structural directive that serves as a drop-in replacement for Angular’s native `NgIf` **(restricted to immutable objects)**,\r\n * but comes with additional advanced capabilities. Much like NgIf, it is designed for conditional rendering of templates based on the value bound to its input.\r\n *\r\n * When the input evaluates to a truthy value, the directive creates an embedded view from the attached ng-template (the default `“then”` template) or, more commonly,\r\n * from a custom template provided via the `[qxIfThen]` input. Conversely, when the input is falsy, the directive removes the active view and, if defined,\r\n * instantiates the template specified in `[qxIfElse]`.\r\n *\r\n * Where `QueuexIf` truly stands out is in how it manages these views. Every embedded view is instantiated lazily through the concurrent scheduler provided by `\"ng-queuex/core\"`,\r\n * ensuring efficient rendering under heavy workloads. Each view is also assigned its own isolated reactive context, enabling local change detection that runs independently from Angular’s\r\n * global change detection cycles — and even separately from the host component’s change detection. Because views are detached from the parent logical tree, any signal read\r\n * directly within the template can autonomously trigger change detection for that specific view.\r\n *\r\n * This architecture makes QueuexIf a powerful alternative to NgIf, combining familiar conditional rendering semantics with modern, high-performance rendering and granular reactivity.\r\n *\r\n * ### Server side fallback\r\n *\r\n * On the server side, QueuexIf gracefully falls back to the behavior of Angular’s native NgIf. All the advanced client-side features — such as lazy\r\n * instantiation via the concurrent scheduler, isolated reactive contexts, and signal-driven change detection — are intentionally disabled during server-side rendering.\r\n * These capabilities are unnecessary in an SSR environment and would only introduce additional overhead. By reverting to a simplified NgIf-like mode, QueuexIf ensures\r\n * that server-rendered output remains clean, predictable, and optimized for maximum performance.\r\n *\r\n * ### Inputs\r\n *\r\n * ```ts\r\n *  *@Input({ required: true })\r\n *  set qxIf(condition: T | Signal<T>)\r\n *\r\n * // Gets called in browser when at least one view gets created or destroyed.\r\n * *@Input()\r\n *  qxIfRenderCallback: ((arg: T) => void) | null;\r\n *\r\n * // Priority level for concurrent scheduler, used for creating.\r\n * *@Input({ transform: advancePriorityInputTransform })\r\n *  set qxIfPriority(priorityLevel: PriorityLevel | Signal<PriorityLevel>);\r\n *\r\n * //Template what will be used to render if [qxIf] input will be truthy.\r\n * *@Input()\r\n *  set qxIfThen(thenTmpRef: TemplateRef<QueuexIfContext<T>> | Signal<TemplateRef<QueuexIfContext<T>>> | null | undefined);\r\n *\r\n * //Template what will be used to render if [qxIf] input will be falsy.\r\n * *@Input()\r\n *  set qxIfElse(elseTmpRef: TemplateRef<QueuexIfContext<T>> | Signal<TemplateRef<QueuexIfContext<T>>> | null | undefined);\r\n *\r\n * ```\r\n * ### Template context variables\r\n *\r\n * ```ts\r\n *  class QueuexIfContext<T>  {\r\n *    $implicit: Signal<T>;\r\n *    qxIf: Signal<T>;\r\n *  }\r\n * ```\r\n */\r\n@Directive({ selector: 'ng-template[qxIf]' })\r\nexport class QueuexIf<T = unknown> implements OnInit, OnDestroy {\r\n  private _view: QxIfView\r\n  private _defaultThenTemplate: TemplateRef<QueuexIfContext<T>> = inject(TemplateRef);\r\n  private _conditionSource = sharedSignal<T>(undefined!, NG_DEV_MODE ? 'conditionSource' : undefined);\r\n  private _thenTmpRefSource = sharedSignal(this._defaultThenTemplate, NG_DEV_MODE ? 'thenTemplateRefSource' : undefined);\r\n  private _elseTmpRefSource = sharedSignal<TemplateRef<QueuexIfContext<T>> | null>(null, NG_DEV_MODE ? 'elseTemplateRefSource' : undefined);\r\n  private _priorityRef = value<PriorityLevel>(inject(QX_IF_DEFAULT_PRIORITY), NG_DEV_MODE ? 'priorityRef' : undefined);\r\n\r\n  /**\r\n   * A callback what will be called when at least one of the template gets created or removed. This enables developers to perform actions when rendering has been done.\r\n   * The `qxIfRenderCallback` is useful in situations where you rely on specific DOM properties like the dimensions of an item after it got rendered.\r\n   *\r\n   * The `qxIfRenderCallback` emits the latest value causing the view to update.\r\n   */\r\n  @Input() qxIfRenderCallback: ((arg: T) => void ) | null = null;\r\n\r\n  /**\r\n   * The value to evaluate as the condition for showing a template.\r\n   */\r\n  @Input({ required: true }) set qxIf(condition: T | Signal<T>) {\r\n    this._conditionSource.set(condition);\r\n  }\r\n\r\n  /**\r\n   * A priority for concurrent scheduler to manage views. It can be set as numeric value (1-5) or as\r\n   * string literal with valid options: `'highest' | 'high' | 'normal' | 'low' | 'lowest'`. Default is normal (3).\r\n   *\r\n   * This input also accepts the signal of the previously mentioned values\r\n   */\r\n  @Input({ transform: advancePriorityInputTransform }) set qxIfPriority(priorityLevel: PriorityLevel | Signal<PriorityLevel>) {\r\n    this._priorityRef.set(priorityLevel)\r\n  }\r\n\r\n  /**\r\n   * A template to show if the condition evaluates to be truthy.\r\n   */\r\n  @Input() set qxIfThen(thenTmpRef: TemplateRef<QueuexIfContext<T>> | Signal<TemplateRef<QueuexIfContext<T>>> | null | undefined) {\r\n    thenTmpRef != null ? this._thenTmpRefSource.set(thenTmpRef) : this._thenTmpRefSource.set(this._defaultThenTemplate);\r\n  }\r\n\r\n  /**\r\n   * A template to show if the condition evaluates to be falsy.\r\n   */\r\n  @Input() set qxIfElse(elseTmpRef: TemplateRef<QueuexIfContext<T>> | Signal<TemplateRef<QueuexIfContext<T>>> | null | undefined) {\r\n    this._elseTmpRefSource.set(elseTmpRef);\r\n  }\r\n\r\n  constructor() {\r\n    assertNgQueuexIntegrated('[qxIf]: Assertion failed! \"@ng-queuex/core\" integration not provided.');\r\n    if (isPlatformBrowser(inject(PLATFORM_ID))) {\r\n      this._view = new ClientQxIfView(this, this._thenTmpRefSource.ref, this._elseTmpRefSource.ref, this._priorityRef)\r\n    } else {\r\n      this._view = new ServerQxIfView(this._thenTmpRefSource.ref, this._elseTmpRefSource.ref);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this._view.init(new QueuexIfContext<T>(this._conditionSource.ref));\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnDestroy(): void {\r\n    this._view.dispose();\r\n  }\r\n\r\n  /**\r\n   * Assert the correct type of the expression bound to the `qxIf` input within the template.\r\n   *\r\n   * The presence of this static field is a signal to the Ivy template type check compiler that\r\n   * when the `QueuexIf` structural directive renders its template, the type of the expression bound\r\n   * to `qxIf` should be narrowed in some way. For `QueuexIf`, the binding expression itself is used to\r\n   * narrow its type, which allows the strictNullChecks feature of TypeScript to work with `QueuexIf`.\r\n   */\r\n  static ngTemplateGuard_qxIf: 'binding';\r\n  static ngTemplateContextGuard<T>(dir: QueuexIf<T>, ctx: any): ctx is QueuexIfContext<Exclude<T, false | 0 | '' | null | undefined>> {\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\nexport class QueuexIfContext<T = unknown> {\r\n\r\n  public $implicit: Signal<T>\r\n  public qxIf: Signal<T>\r\n\r\n  constructor(valueSource: Signal<T>) {\r\n    this.$implicit = this.qxIf = valueSource;\r\n  }\r\n}\r\n\r\nfunction assertTemplateRef<T>(templateRef: TemplateRef<T>, propertyName: string): TemplateRef<T>;\r\nfunction assertTemplateRef<T>(templateRef: TemplateRef<T> | null, propertyName: string): TemplateRef<T> | null;\r\nfunction assertTemplateRef<T>(templateRef: TemplateRef<T> | null, propertyName: string): TemplateRef<T> | null {\r\n  if (templateRef && typeof templateRef.createEmbeddedView !== 'function') {\r\n    let typeName: string;\r\n    if (typeof templateRef === 'object' || typeof templateRef === 'function') {\r\n      typeName = (templateRef as any).constructor.name;\r\n    } else {\r\n      typeName = typeof templateRef;\r\n    }\r\n    throw new Error(`${propertyName} must be TemplateRef, but received ${typeName}`)\r\n  }\r\n  return templateRef\r\n}\r\n","import { isPlatformServer } from \"@angular/common\";\r\nimport { Directive, inject, InjectionToken, Input, OnDestroy, OnInit, PLATFORM_ID, TemplateRef, ValueProvider, ViewContainerRef, ɵmarkForRefresh } from \"@angular/core\";\r\nimport { AbortTaskFunction, assertNgQueuexIntegrated, priorityInputTransform, PriorityLevel, PriorityName, priorityNameToNumber, scheduleTask } from \"@ng-queuex/core\";\r\n\r\nconst QX_LAZY_VIEW_DEFAULT_PRIORITY = new InjectionToken<PriorityLevel>('PriorityLevel', { factory: () => 3 /* Priority.Normal */ });\r\n/**\r\n * @deprecated\r\n * Provides an override for `QueuexLazyView` default priority.\r\n *\r\n * @param priority Valid options: `'highest' | 'high' | 'normal' | 'low' | 'lowest'`\r\n * @returns A value provider\r\n */\r\nexport function provideQueuexLazyViewDefaultPriority(priority: PriorityName): ValueProvider {\r\n  return { provide: QX_LAZY_VIEW_DEFAULT_PRIORITY, useValue: priorityNameToNumber(priority, provideQueuexLazyViewDefaultPriority) }\r\n}\r\n\r\n/**\r\n * @Directive QueuexLazyView\r\n *\r\n * `QueuexLazyView` (`*lazyView`) is a lightweight structural directive that lazily instantiates its template without detaching it\r\n * from Angular’s logical tree  and without creating a separate reactive context.\r\n *\r\n * Unlike `QueuexReactiveView`, this directive does not create isolated reactive contexts. However, it still supports\r\n * **prioritized lazy rendering** through its main input. The priority determines when the view is instantiated relative to other scheduled tasks.\r\n *\r\n * Priority can be provided in several ways:\r\n * - Numeric value: `*lazyView=\"3\"` (1–5, default is `3` – Normal)\r\n * - Property binding: `*lazyView=\"priorityLevel\"`\r\n * - String literal: `*lazyView=\"'highest'\" | 'high' | 'normal' | 'low' | 'lowest'`\r\n *\r\n * This makes `QueuexLazyView` suitable for medium-sized UI fragments that benefit from lazy creation, while keeping standard Angular change detection.\r\n *\r\n * @example\r\n * ```html\r\n * <!-- Default priority (Normal) -->\r\n * <section *lazyView>\r\n *   <p>{{ message }}</p>\r\n * </section>\r\n *\r\n * <!-- Explicit numeric priority -->\r\n * <section *lazyView=\"1\">\r\n *   <p>High priority content</p>\r\n * </section>\r\n *\r\n * <!-- Priority from component property -->\r\n * <section *lazyView=\"priorityLevel\">\r\n *   <p>Dynamic priority content</p>\r\n * </section>\r\n *\r\n * <!-- Priority as string literal -->\r\n * <section *lazyView=\"'low'\">\r\n *   <p>Low priority content</p>\r\n * </section>\r\n * ```\r\n *\r\n * ### Server side fallback\r\n *\r\n * On server this directive is simply transparent.\r\n *\r\n * ### Inputs\r\n *\r\n * ```ts\r\n * // A priority for concurrent scheduler to create view.\r\n * *@Input({ alias: 'lazyView', transform: priorityInputTransform })\r\n * priority: PriorityLevel;\r\n *\r\n * // A callback what will be called after view creation.\r\n * *@Input()\r\n * lazyViewRenderCallback: (() => void) | null = null;\r\n * ```\r\n */\r\n@Directive({ selector: 'ng-template[lazyView]' })\r\nexport class QueuexLazyView implements OnInit, OnDestroy {\r\n  private _abortTask: AbortTaskFunction | null = null;\r\n  private _renderCbAbortTask: AbortTaskFunction | null = null;\r\n  private _vcRef = inject(ViewContainerRef);\r\n  private _tmpRef = inject(TemplateRef);\r\n  private _isServer = false;\r\n\r\n  /**\r\n   * A priority for concurrent scheduler to create view. It can be set as numeric value (1-5) or as\r\n   * string literal with valid options: `'highest' | 'high' | 'normal' | 'low' | 'lowest'`. Default is normal (3).\r\n   */\r\n  @Input({ alias: 'lazyView', transform: priorityInputTransform }) priority = inject(QX_LAZY_VIEW_DEFAULT_PRIORITY);\r\n\r\n  /**\r\n   * A callback what will be called after view creation. This enables developers to perform actions when rendering has been done.\r\n   * The `lazyViewRenderCallback` is useful in situations where you rely on specific DOM properties like the dimensions of an item after it got rendered.\r\n   *\r\n   * The `lazyViewRenderCallback` emits the latest value causing the view to update.\r\n   */\r\n  @Input() lazyViewRenderCallback: (() => void) | null = null;\r\n\r\n  constructor() {\r\n    assertNgQueuexIntegrated('[lazyView]: Assertion failed! \"@ng-queuex/core\" integration not provided.');\r\n    if (isPlatformServer(inject(PLATFORM_ID))) {\r\n      this._vcRef.createEmbeddedView(this._tmpRef);\r\n      this._isServer = true\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this._isServer) { return; }\r\n    this._abortTask = scheduleTask(() => {\r\n      const viewRef = this._vcRef.createEmbeddedView(this._tmpRef);\r\n      ɵmarkForRefresh(viewRef as any);\r\n    }, this.priority);\r\n    this._renderCbAbortTask = scheduleTask(() => {\r\n      this.lazyViewRenderCallback?.();\r\n    }, this.priority)\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._abortTask?.();\r\n    this._renderCbAbortTask?.();\r\n  }\r\n}\r\n\r\n","import { isPlatformServer } from \"@angular/common\";\r\nimport { Directive, inject, InjectionToken, Input, OnDestroy, OnInit, PLATFORM_ID, Signal, TemplateRef, ValueProvider, ViewContainerRef, ViewRef } from \"@angular/core\";\r\nimport { createWatch, Watch } from \"@angular/core/primitives/signals\";\r\nimport { AbortTaskFunction, advancePriorityInputTransform, assertNgQueuexIntegrated, detectChangesSync, PriorityLevel, PriorityName, priorityNameToNumber, scheduleChangeDetection, scheduleTask, value } from \"@ng-queuex/core\";\r\nimport { NG_DEV_MODE } from \"../utils/utils\";\r\n\r\nconst QX_REACTIVE_VIEW_PRIORITY = new InjectionToken<PriorityLevel>('QX_REACTIVE_VIEW_PRIORITY', { factory: () => 3 })\r\n\r\n/**\r\n * @description\r\n * Provides an override for `QueuexReactiveView` default priority.\r\n *\r\n * @param priority Valid options: `'highest' | 'high' | 'normal' | 'low' | 'lowest'`\r\n * @returns A value provider\r\n */\r\nexport function provideQueuexReactiveViewDefaultPriority(priority: PriorityName): ValueProvider {\r\n  return { provide: QX_REACTIVE_VIEW_PRIORITY, useValue: priorityNameToNumber(priority, provideQueuexReactiveViewDefaultPriority) }\r\n}\r\n\r\n/**\r\n * @Directive QueuexReactiveView\r\n *\r\n * `QueuexReactiveView` (`*reactiveView`) is a structural directive for rendering larger portions of the UI in a reactive, scheduler-driven way.\r\n * It works similarly to `QueuexWatch`, but instead of creating the embedded view immediately, it instantiates it lazily and manages its\r\n * lifecycle through a prioritized concurrent scheduler.\r\n *\r\n * By default, the directive uses **Normal (3)** priority. The priority level controls both when the view is created and how its change detection is scheduled.\r\n * Developers can override this behavior by providing a priority directly through the main input:\r\n *\r\n * - As a numeric value: `*reactiveView=\"3\"` (valid values: 1–5)\r\n * - As a property binding: `*reactiveView=\"priorityLevel\"`\r\n * - As a string literal: `*reactiveView=\"'normal'\"`\r\n *   (valid options: `'highest' | 'high' | 'normal' | 'low' | 'lowest'`)\r\n *\r\n * This makes it possible to fine-tune how reactive views are scheduled and updated, striking the right balance between responsiveness and performance. Because views\r\n * are created lazily and scheduled with explicit priorities, `QueuexReactiveView` is particularly suited for larger UI fragments or more complex sub-trees, where eager\r\n * rendering would be costly.\r\n *\r\n * @note\r\n * Change detection is triggered only for signals read directly in the template. Signals used inside child components or elsewhere in the component class will\r\n * not automatically trigger local change detection within the reactive view.\r\n *\r\n * ### Server side fallback\r\n *\r\n * On the server side, `QueuexReactiveView` is fully transparent. All client-side scheduling, lazy view creation, and reactive context features\r\n * are disabled during SSR. The directive falls back to standard Angular template rendering,  ensuring clean, predictable HTML output without introducing overhead.\r\n *\r\n * @example\r\n * ```html\r\n * <!-- Default priority (normal, 3) -->\r\n * <div *reactiveView>\r\n *   Counter: {{ counter() }}\r\n * </div>\r\n * <section *reactiveView>\r\n *   <app-dashboard></app-dashboard>\r\n * </section>\r\n *\r\n * <!-- Explicit priority as number -->\r\n * <div *reactiveView=\"1\">\r\n *   Current user: {{ userName() }}\r\n * </div>\r\n * <section *reactiveView=\"1\">\r\n *   <app-heavy-chart></app-heavy-chart>\r\n * </section>\r\n *\r\n * <!-- Priority bound to component property -->\r\n * <div *reactiveView=\"priorityLevel\">\r\n *   Items total: {{ itemsCount() }}\r\n * </div>\r\n * <section *reactiveView=\"priorityLevel\">\r\n *   <app-dynamic-feed></app-dynamic-feed>\r\n * </section>\r\n *\r\n * <!-- Priority as string literal -->\r\n * <div *reactiveView=\"'low'\">\r\n *   Status: {{ statusSignal() }}\r\n * </div>\r\n * <section *reactiveView=\"'low'\">\r\n *   <app-lazy-widget></app-lazy-widget>\r\n * </section>\r\n * ```\r\n *\r\n * ### Inputs\r\n *\r\n * ```ts\r\n * // A priority for concurrent scheduler to manage view.\r\n * *@Input({ alias: 'reactiveView', transform: advancePriorityInputTransform })\r\n * set priority(value: PriorityLevel | Signal<PriorityLevel>);\r\n *\r\n * // A callback what will be called after view creation.\r\n * *@Input()\r\n * reactiveViewRenderCallback: (() => void) | null = null;\r\n * ```\r\n *\r\n *\r\n *\r\n */\r\n@Directive({ selector: 'ng-template[reactiveView]' })\r\nexport class QueuexReactiveView implements OnInit, OnDestroy {\r\n  private _tmpRef = inject(TemplateRef);\r\n  private _vcRef = inject(ViewContainerRef);\r\n  private _watcher: Watch | null = null;\r\n  private _viewRef: ViewRef | null = null;\r\n  private _scheduled = false;\r\n  private _abortTask: AbortTaskFunction | null = null;\r\n  private _renderCbAbortTask: AbortTaskFunction | null = null;\r\n  private _isServer = false;\r\n  private _priorityRef = value(inject(QX_REACTIVE_VIEW_PRIORITY), NG_DEV_MODE ? '[reactiveView]=\"priorityLevel\"' : undefined)\r\n\r\n  /**\r\n   * A priority for concurrent scheduler to manage view. It can be set as numeric value (1-5) or as\r\n   * string literal with valid options: `'highest' | 'high' | 'normal' | 'low' | 'lowest'`. Default is normal (3).\r\n   *\r\n   * This input also accepts the signal of the previously mentioned values.\r\n   */\r\n  @Input({ alias: 'reactiveView', transform: advancePriorityInputTransform }) set priority(value: PriorityLevel | Signal<PriorityLevel>) {\r\n    this._priorityRef.set(value);\r\n  }\r\n\r\n  /**\r\n   * A callback what will be called after view creation. This enables developers to perform actions when rendering has been done.\r\n   * The `reactiveViewRenderCallback` is useful in situations where you rely on specific DOM properties like the dimensions of an item after it got rendered.\r\n   *\r\n   * The `reactiveViewRenderCallback` emits the latest value causing the view to update.\r\n   */\r\n  @Input() reactiveViewRenderCallback: (() => void) | null = null;\r\n\r\n  constructor() {\r\n    assertNgQueuexIntegrated('[reactiveView]: Assertion failed! \"@ng-queuex/core\" integration not provided.');\r\n    if (isPlatformServer(inject(PLATFORM_ID))) {\r\n      this._vcRef.createEmbeddedView(this._tmpRef);\r\n      this._isServer = true;\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this._isServer) { return; }\r\n    this._watcher = createWatch(\r\n      () => this._effectCallback(),\r\n      () => this._scheduleEffectCallback(),\r\n      false\r\n    );\r\n    this._watcher.notify()\r\n    this._renderCbAbortTask = scheduleTask(\r\n      () => {\r\n        this.reactiveViewRenderCallback?.();\r\n      },\r\n      this._priorityRef.value\r\n    )\r\n  }\r\n\r\n  private _effectCallback() {\r\n    if (!this._viewRef) {\r\n      this._viewRef = this._vcRef.createEmbeddedView(this._tmpRef);\r\n    }\r\n    detectChangesSync(this._viewRef);\r\n    this._scheduled = false;\r\n  }\r\n\r\n  private _scheduleEffectCallback() {\r\n    if (this._scheduled) { return; }\r\n    this._scheduled = true;\r\n\r\n    this._abortTask = scheduleChangeDetection(\r\n      () => this._watcher!.run(),\r\n      this._priorityRef.value,\r\n      this._viewRef\r\n    )\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._abortTask?.();\r\n    this._renderCbAbortTask?.();\r\n    this._watcher?.destroy();\r\n  }\r\n}\r\n","import {\r\n  createWatch,\r\n  setActiveConsumer,\r\n  Watch\r\n} from \"@angular/core/primitives/signals\"\r\nimport {\r\n  AfterContentChecked,\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  DoCheck,\r\n  effect,\r\n  inject,\r\n  InjectionToken,\r\n  Injector,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  output,\r\n  PLATFORM_ID,\r\n  signal,\r\n  Signal,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ValueProvider,\r\n  ViewContainerRef,\r\n  ViewRef,\r\n  ɵmarkForRefresh\r\n} from \"@angular/core\";\r\nimport { isPlatformServer } from \"@angular/common\";\r\nimport {\r\n  AbortTaskFunction,\r\n  advancePriorityInputTransform,\r\n  assertNgQueuexIntegrated,\r\n  detectChangesSync,\r\n  isInConcurrentTaskContext,\r\n  onTaskExecuted,\r\n  PriorityLevel,\r\n  PriorityName,\r\n  priorityNameToNumber,\r\n  scheduleChangeDetection,\r\n  scheduleTask,\r\n  sharedSignal,\r\n  value,\r\n  ValueRef\r\n} from \"@ng-queuex/core\";\r\nimport { NG_DEV_MODE } from \"../utils/utils\";\r\n\r\ninterface CaseView {\r\n  isChecking: boolean;\r\n  initialize(): void;\r\n  enforceState(create: boolean): boolean;\r\n  check(): void;\r\n  dispose(): void;\r\n}\r\n\r\nclass ServerCaseView implements CaseView {\r\n  private _vcRef = inject(ViewContainerRef);\r\n  private _tmpRef = inject(TemplateRef);\r\n  private _viewRef: ViewRef | null = null;\r\n  private _cdRef = inject(ChangeDetectorRef);\r\n  private _caseSource: Signal<any> | null = null;\r\n  private _switchView: SwitchView;\r\n\r\n  isChecking = false;\r\n\r\n  constructor(caseSource: Signal<any> | null) {\r\n    const switchView = inject(SwitchView, { optional: true,  host: true });\r\n    if (NG_DEV_MODE && !switchView) {\r\n      if (caseSource) {\r\n        throwQxSwitchProviderNotFoundError('qxSwitchCase', 'QueuexSwitchCase');\r\n      } else {\r\n        throwQxSwitchProviderNotFoundError('qxSwitchDefault', 'QueuexSwitchDefault');\r\n      }\r\n    }\r\n\r\n    this._switchView = switchView!;\r\n\r\n    if (caseSource) {\r\n      switchView!.addCase(this, caseSource);\r\n      this._caseSource = caseSource;\r\n      effect(() => {\r\n        caseSource();\r\n        if (this.isChecking) { return; }\r\n        ɵmarkForRefresh(this._cdRef as any)\r\n      });\r\n    } else {\r\n      switchView!.addDefault(this);\r\n    }\r\n  }\r\n\r\n  initialize(): void { /** noop */ }\r\n\r\n  enforceState(create: boolean): boolean {\r\n    if (create && !this._viewRef) {\r\n      this._viewRef = this._vcRef.createEmbeddedView(this._tmpRef);\r\n    } else if (!create && this._viewRef) {\r\n      this._vcRef.clear();\r\n      this._viewRef = null;\r\n    }\r\n    return create;\r\n  }\r\n\r\n  check(): void {\r\n    this.enforceState(this._switchView.match(this._caseSource!()));\r\n  }\r\n\r\n  dispose(): void { /* noop */ }\r\n}\r\n\r\nclass ClientCaseView implements CaseView {\r\n  private _create = signal(false);\r\n  private _vcRef = inject(ViewContainerRef);\r\n  private _tmpRef = inject(TemplateRef);\r\n  private _viewRef: ViewRef | null = null;\r\n  private _switchView: SwitchView;\r\n  private _watcher: Watch | null = null;\r\n  private _abortTask: AbortTaskFunction | null = null;\r\n  private _scheduled = false;\r\n\r\n  constructor(caseSource: Signal<any> | null) {\r\n    const switchView = inject(SwitchView, { optional: true,  host: true });\r\n    if (NG_DEV_MODE && !switchView) {\r\n      if (caseSource) {\r\n        throwQxSwitchProviderNotFoundError('qxSwitchCase', 'QueuexSwitchCase');\r\n      } else {\r\n        throwQxSwitchProviderNotFoundError('qxSwitchDefault', 'QueuexSwitchDefault');\r\n      }\r\n    }\r\n\r\n    this._switchView = switchView!;\r\n\r\n    if (caseSource) {\r\n      switchView!.addCase(this, caseSource);\r\n    } else {\r\n      switchView!.addDefault(this);\r\n    }\r\n  }\r\n\r\n  isChecking = false;\r\n\r\n  initialize(): void {\r\n    this._watcher = createWatch(\r\n      () => this._runEffect(),\r\n      () => this._scheduleEffect(),\r\n      false\r\n    );\r\n    this._watcher.notify();\r\n  }\r\n\r\n  enforceState(create: boolean): boolean {\r\n    this._create.set(create);\r\n    return create;\r\n  }\r\n\r\n  check(): void { /** noop */ }\r\n\r\n  dispose(): void {\r\n    if (this._watcher) { this._watcher.destroy(); }\r\n    if (this._abortTask) { this._abortTask(); }\r\n  }\r\n\r\n  private _runEffect() {\r\n    const create = this._create();\r\n\r\n    if (create && !this._viewRef) {\r\n      this._viewRef = this._vcRef.createEmbeddedView(this._tmpRef);\r\n      this._switchView.shouldEmitRenderEvent()\r\n    } else if(!create && this._viewRef) {\r\n      this._vcRef.clear();\r\n      this._viewRef = null;\r\n      this._switchView.shouldEmitRenderEvent();\r\n    }\r\n\r\n    if (this._viewRef) {\r\n      detectChangesSync(this._viewRef);\r\n    }\r\n\r\n    this._scheduled = false;\r\n  }\r\n\r\n  private _scheduleEffect(): void {\r\n    if (this._scheduled) { return; }\r\n    this._scheduled = true;\r\n    this._abortTask = scheduleChangeDetection(\r\n      () => this._watcher!.run(),\r\n      this._switchView.priority,\r\n      this._viewRef\r\n    );\r\n  }\r\n\r\n}\r\n\r\nabstract class SwitchView {\r\n  abstract isChecking: boolean;\r\n  abstract readonly priority: PriorityLevel\r\n  abstract initialize(directive: QueuexSwitch, cdRef: ChangeDetectorRef, switchSource: Signal<any>, priorityRef: ValueRef<PriorityLevel>): void;\r\n  abstract addCase(caseView: CaseView, caseSource: Signal<any>): void;\r\n  abstract addDefault(defaultView: CaseView): void;\r\n  abstract match(value: any): boolean;\r\n  abstract shouldEmitRenderEvent(): void;\r\n  abstract dispose(): void;\r\n}\r\n\r\nclass ServerSwitchView implements SwitchView {\r\n  private _defaultViews: CaseView[] = [];\r\n  private _defaultUsed = false;\r\n  private _caseCount = 0;\r\n  private _lastCaseCheckIndex = 0;\r\n  private _lastCaseMatched = false\r\n  private _switchSource: Signal<any> = null!;\r\n  private _injector = inject(Injector);\r\n\r\n  isChecking = false;\r\n\r\n  get priority(): PriorityLevel {\r\n    throw new Error('Internal Error: ServerSwitchView#priority not supported property');\r\n  }\r\n\r\n  initialize(\r\n    directive: QueuexSwitch,\r\n    cdRef: ChangeDetectorRef,\r\n    switchSource: Signal<any>,\r\n    priorityRef: ValueRef<PriorityLevel>\r\n  ): void {\r\n    this._switchSource = switchSource;\r\n    effect(() => {\r\n      switchSource()\r\n      if (this._caseCount === 0) {\r\n        this._updataDefaultCases(true);\r\n      }\r\n      if (this.isChecking) { return; }\r\n      ɵmarkForRefresh(cdRef as any);\r\n    }, { injector: this._injector });\r\n  }\r\n\r\n  addCase(caseView: CaseView, caseSource: Signal<any>): void {\r\n    this._caseCount++\r\n  }\r\n\r\n  addDefault(defaultView: CaseView): void {\r\n    this._defaultViews.push(defaultView);\r\n  }\r\n\r\n  match(value: any): boolean {\r\n    const matched = value === this._switchSource();\r\n    this._lastCaseMatched ||= matched;\r\n    this._lastCaseCheckIndex++\r\n    if (this._lastCaseCheckIndex === this._caseCount) {\r\n      this._updataDefaultCases(!this._lastCaseMatched);\r\n      this._lastCaseCheckIndex = 0;\r\n      this._lastCaseMatched = false;\r\n    }\r\n    return matched;\r\n  }\r\n\r\n  shouldEmitRenderEvent(): void { /** noop */ }\r\n\r\n  dispose(): void { /** noop */ }\r\n\r\n  private _updataDefaultCases(useDefault: boolean): void {\r\n    if (this._defaultViews.length && this._defaultUsed !== useDefault) {\r\n      this._defaultUsed = useDefault;\r\n      for (let i = 0; i < this._defaultViews.length; i++) {\r\n        this._defaultViews[i].enforceState(useDefault);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass ClientSwitchView implements SwitchView {\r\n  private _directive: QueuexSwitch = null!;\r\n  private _switchSource: Signal<any> = null!;\r\n  private _switch: any;\r\n  private _priorityRef: ValueRef<PriorityLevel> = null!;\r\n  private _caseViews: [CaseView, Signal<any>][] = [];\r\n  private _defaultViews: CaseView[] = [];\r\n  private _viewsToInitialize: CaseView[] | null = [];\r\n  private _watcher: Watch | null = null;\r\n  private _abortTask: AbortTaskFunction | null = null;\r\n  private _abortEventTask: AbortTaskFunction | null = null;\r\n  private _emitEvent = false;\r\n  private _scheduled = false;\r\n  private _disposed = false;\r\n  isChecking = false;\r\n\r\n  get priority(): PriorityLevel {\r\n    return this._priorityRef.value;\r\n  }\r\n\r\n  initialize(\r\n    directive: QueuexSwitch,\r\n    cdRef: ChangeDetectorRef,\r\n    switchSource: Signal<any>,\r\n    priorityRef: ValueRef<PriorityLevel>\r\n  ): void {\r\n    this._directive = directive;\r\n    this._switchSource = switchSource;\r\n    this._priorityRef = priorityRef;\r\n\r\n    this._watcher = createWatch(\r\n      () => this._runEffect(),\r\n      () => this._scheduleEffect(),\r\n      true\r\n    )\r\n    this._watcher.notify();\r\n  }\r\n  addCase(caseView: CaseView, caseSource: Signal<any>): void {\r\n    this._caseViews.push([caseView, caseSource]);\r\n    this._viewsToInitialize!.push(caseView);\r\n  }\r\n  addDefault(defaultView: CaseView): void {\r\n    this._defaultViews.push(defaultView);\r\n    this._viewsToInitialize!.push(defaultView);\r\n  }\r\n  match(value: any): boolean {\r\n    return value === this._switch;\r\n  }\r\n  shouldEmitRenderEvent(): void {\r\n    this._emitEvent = true;\r\n  }\r\n  dispose(): void {\r\n    this._disposed = true;\r\n    if (this._watcher) { this._watcher.destroy(); }\r\n    if (this._abortTask) { this._abortTask(); }\r\n  }\r\n\r\n  private _runEffect(): void {\r\n\r\n    if (this._viewsToInitialize) {\r\n      const prevConsumer = setActiveConsumer(null);\r\n      try {\r\n        for (let i = 0; i < this._viewsToInitialize.length; i++) {\r\n          this._viewsToInitialize[i].initialize();\r\n        }\r\n        this._viewsToInitialize = null;\r\n      } finally {\r\n        setActiveConsumer(prevConsumer);\r\n      }\r\n    }\r\n\r\n    this._switch = this._switchSource();\r\n\r\n    let matched = false;\r\n    for (let i = 0; i < this._caseViews.length; i++) {\r\n      const [switchView, switchSource] = this._caseViews[i];\r\n      matched = switchView.enforceState(this.match(switchSource())) || matched;\r\n    }\r\n\r\n    for (let i = 0; i < this._defaultViews.length; i++) {\r\n      this._defaultViews[i].enforceState(!matched);\r\n    }\r\n\r\n    if (this._abortEventTask) { this._abortEventTask(); }\r\n    this._abortEventTask = scheduleTask(() => {\r\n      if (this._emitEvent) {\r\n        this._emitEvent = false;\r\n        this._directive.render.emit(this._switchSource());\r\n      }\r\n    }, this._priorityRef.value);\r\n\r\n    this._scheduled = false;\r\n  }\r\n\r\n  private _scheduleEffect(): void {\r\n    if (this._scheduled) { return; }\r\n    this._scheduled = true;\r\n    if(isInConcurrentTaskContext()) {\r\n      onTaskExecuted(() => {\r\n        if (this._disposed) { return; }\r\n        this._watcher!.run();\r\n      })\r\n    } else {\r\n      this._abortTask = scheduleTask(\r\n        () => this._watcher!.run(),\r\n        1 /** Priority.Highest */\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n\r\nconst QX_SWITCH_DEFAULT_PRIORITY = new InjectionToken<PriorityLevel>('QX_SWITCH_DEFAULT_PRIORITY', { factory: () => 3 /* Priority.Normal */ })\r\n\r\nexport function provideQueuexSwitchDefaultPriority(priority: PriorityName): ValueProvider {\r\n  return { provide:QX_SWITCH_DEFAULT_PRIORITY, useValue: priorityNameToNumber(priority, provideQueuexSwitchDefaultPriority) }\r\n}\r\n\r\n/**\r\n * @Directive QueuexSwitch\r\n *\r\n * `QueuexSwitch` (`[qxSwitch]`) is the core structural directive of the switch family, designed as a drop-in replacement for Angular’s `NgSwitch` **(restricted to immutable objects)**.\r\n * It enables conditional rendering of templates based on the value of an expression, in combination with `QueuexSwitchCase` (`*qxSwitchCase`)\r\n * and `QueuexSwitchDefault` (`*qxSwitchDefault`).\r\n *\r\n * Each embedded view created by `QueuexSwitch` is:\r\n * - **Lazily instantiated** using the concurrent scheduler from `ng-queuex/core`.\r\n * - **Detached from Angular’s logical tree**, ensuring that it does not participate\r\n *   in the host component’s change detection cycle.\r\n * - Assigned its own **isolated reactive context**, which means signals read directly\r\n *   in the template can trigger fine-grained, independent change detection.\r\n *\r\n * When the `[qxSwitch]` expression changes, the directive activates the first matching `*qxSwitchCase` view (or the `*qxSwitchDefault` view if no case matches).\r\n * Because views are scheduled and detached, rendering is both efficient and predictable, even for complex UI states.\r\n *\r\n * ### Server side fallback\r\n *\r\n * On the server side, `QueuexSwitch` behaves like Angular’s native `NgSwitch`. No detached views or reactive contexts are created, and no concurrent scheduling\r\n * takes place. All cases are evaluated synchronously, ensuring predictable and performant SSR output.\r\n *\r\n * @example\r\n * ```html\r\n * <div [qxSwitch]=\"status\">\r\n *   <p *qxSwitchCase=\"'loading'\">Loading...</p>\r\n *   <p *qxSwitchCase=\"'success'\">Data loaded successfully ✅</p>\r\n *   <p *qxSwitchCase=\"'error'\">Something went wrong ❌</p>\r\n *   <p *qxSwitchDefault>Unknown state 🤔</p>\r\n * </div>\r\n * ```\r\n *\r\n * ### Inputs\r\n *\r\n * ```ts\r\n * *@Input({ required: true })\r\n * set qxSwitch(value: any | Signal<any>);\r\n *\r\n * // Priority level for concurrent scheduler, used for creating.\r\n * *@Input({ transform: advancePriorityInputTransform })\r\n * set priority(priority: PriorityLevel | Signal<PriorityLevel>);\r\n * ```\r\n *\r\n * ### Outputs\r\n * ```ts\r\n * //Emits event when at least one of templates gets created or destroyed.\r\n * readonly render: OutputEmitterRef<any>;\r\n * ```\r\n *\r\n */\r\n@Directive({\r\n  selector: '[qxSwitch]:not(ng-template)',\r\n  providers: [{\r\n    provide: SwitchView,\r\n    useFactory: () => {\r\n      if (isPlatformServer(inject(PLATFORM_ID))) {\r\n        return new ServerSwitchView();\r\n      } else {\r\n        return new ClientSwitchView();\r\n      }\r\n    }\r\n  }]\r\n})\r\nexport class QueuexSwitch implements OnChanges, OnInit, AfterContentChecked, OnDestroy {\r\n  private _priorityRef = value(inject(QX_SWITCH_DEFAULT_PRIORITY), NG_DEV_MODE ? '[qxSwitch][priority]' : undefined)\r\n  private _switchSource = sharedSignal<any>(undefined);\r\n  private _view = inject(SwitchView);\r\n  private _cdRef = inject(ChangeDetectorRef);\r\n\r\n  /**\r\n   * A priority for concurrent scheduler to manage views. It can be set as numeric value (1-5) or as\r\n   * string literal with valid options: `'highest' | 'high' | 'normal' | 'low' | 'lowest'`. Default is normal (3).\r\n   *\r\n   * This input also accepts the signal of the previously mentioned values\r\n   */\r\n  @Input({ transform: advancePriorityInputTransform }) set priority(priority: PriorityLevel | Signal<PriorityLevel>) {\r\n    this._priorityRef.set(priority);\r\n  }\r\n\r\n  @Input({ required: true }) set qxSwitch(value: any | Signal<any>) {\r\n    this._switchSource.set(value);\r\n  }\r\n\r\n  /**\r\n   * A output what will be emitted when at least one of the template gets created or removed. This enables developers to perform actions when rendering has been done.\r\n   * The `render` is useful in situations where you rely on specific DOM properties like the dimensions of an item after it got rendered.\r\n   *\r\n   * The `render` emits the latest value causing the view to update.\r\n   */\r\n  readonly render = output<any>();\r\n\r\n  constructor() {\r\n    assertNgQueuexIntegrated('[qxSwitch]: Assertion failed! \"@ng-queuex/core\" integration not provided.');\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['qxSwitch']) {\r\n      this._view.isChecking = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnInit(): void {\r\n    this._view.initialize(this, this._cdRef, this._switchSource.ref, this._priorityRef);\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngAfterContentChecked(): void {\r\n    this._view.isChecking = false;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnDestroy(): void {\r\n    this._view.dispose();\r\n  }\r\n}\r\n\r\n/**\r\n * `QueuexSwitchCase` (`*qxSwitchCase`) is a companion structural directive to  `QueuexSwitch` (`[qxSwitch]`). It defines a template block that\r\n * is rendered when the bound `qxSwitch` expression matches the provided case value.\r\n *\r\n * Each case view created by this directive is:\r\n * - **Lazily instantiated** through the concurrent scheduler from `ng-queuex/core`.\r\n * - **Detached from Angular’s logical tree**, so it is not affected by the host\r\n *   component’s change detection cycle.\r\n * - Given its own **isolated reactive context**, which allows signals read directly\r\n *   in the template to trigger local, fine-grained change detection.\r\n *\r\n * When the parent `[qxSwitch]` value changes, `QueuexSwitchCase` views are efficiently  scheduled and activated or destroyed depending\r\n * on whether their case matches.\r\n *\r\n * ### Server side fallback\r\n *\r\n * During server-side rendering, `QueuexSwitchCase` falls back to the behavior of  Angular’s native `NgSwitchCase`. Views are instantiated\r\n * synchronously and remain part of the standard logical view tree. No detachment, no isolated reactive contexts, and no scheduling are\r\n * applied — ensuring clean, fast, and predictable SSR output.\r\n *\r\n * @example\r\n * ```html\r\n * <div [qxSwitch]=\"status\">\r\n *   <p *qxSwitchCase=\"'loading'\">Loading…</p>\r\n *   <p *qxSwitchCase=\"'success'\">Data loaded ✅</p>\r\n *   <p *qxSwitchCase=\"'error'\">Something went wrong ❌</p>\r\n *   <p *qxSwitchDefault>Unknown state 🤔</p>\r\n * </div>\r\n * ```\r\n * ### Inputs\r\n * ```ts\r\n * *@Input({ required: true })\r\n * set qxSwitchCase(value: any | Signal<any>);\r\n * ```\r\n */\r\n@Directive({ selector: 'ng-template[qxSwitchCase]' })\r\nexport class QueuexSwitchCase implements OnChanges, DoCheck, AfterContentChecked, OnDestroy {\r\n  private _caseSource = sharedSignal<any>(undefined, NG_DEV_MODE ? '[qxSwitchCase]' : undefined);\r\n  private _caseView: CaseView;\r\n\r\n  @Input({ required: true }) set qxSwitchCase(value: any | Signal<any>) {\r\n    this._caseSource.set(value)\r\n  }\r\n\r\n  constructor() {\r\n    assertNgQueuexIntegrated('[qxSwitchCase]: Assertion failed! \"@ng-queuex/core\" integration not provided.');\r\n    if (isPlatformServer(inject(PLATFORM_ID))) {\r\n      this._caseView = new ServerCaseView(this._caseSource.ref);\r\n    } else {\r\n      this._caseView = new ClientCaseView(this._caseSource.ref);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this._caseView.isChecking = true;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngDoCheck(): void {\r\n    this._caseView.check();\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngAfterContentChecked(): void {\r\n    this._caseView.isChecking = false;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnDestroy(): void {\r\n    this._caseView.dispose();\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * `QueuexSwitchDefault` (`*qxSwitchDefault`) is a companion structural directive for `QueuexSwitch` (`[qxSwitch]`). It defines a fallback template\r\n * that is rendered  when none of the `*qxSwitchCase` values match the parent `[qxSwitch]` expression.\r\n *\r\n * The default view created by this directive is:\r\n * - **Lazily instantiated** using the concurrent scheduler from `ng-queuex/core`.\r\n * - **Detached from Angular’s logical tree**, ensuring it is independent of the\r\n *   host component’s change detection.\r\n * - Assigned its own **isolated reactive context**, so signals read directly in the\r\n *   template can trigger local, fine-grained change detection.\r\n *\r\n * If present, it guarantees that the switch will always render some content when no explicit case matches.\r\n *\r\n * @example\r\n * ```html\r\n * <div [qxSwitch]=\"status\">\r\n *   <p *qxSwitchCase=\"'loading'\">Loading…</p>\r\n *   <p *qxSwitchCase=\"'success'\">Data loaded ✅</p>\r\n *   <p *qxSwitchDefault>Nothing matched 🤷</p>\r\n * </div>\r\n * ```\r\n *\r\n */\r\n@Directive({ selector: 'ng-template[qxSwitchDefault]' })\r\nexport class QueuexSwitchDefault implements OnDestroy {\r\n  private _view: CaseView\r\n\r\n  constructor() {\r\n    assertNgQueuexIntegrated('[qxSwitchDefault]: Assertion failed! \"@ng-queuex/core\" integration not provided.');\r\n    if (isPlatformServer(inject(PLATFORM_ID))) {\r\n      this._view = new ServerCaseView(null);\r\n    } else {\r\n      this._view = new ClientCaseView(null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  ngOnDestroy(): void {\r\n    this._view.dispose();\r\n  }\r\n}\r\n\r\n// const imports: any[] = [QueuexSwitchCase, QueuexSwitchDefault]\r\n\r\n// /**\r\n//  * `QueuexSwitchModule` bundles together the `QueuexSwitch` family of structural  directives, providing a drop-in replacement for Angular’s `NgSwitch` system.\r\n//  *\r\n//  * It includes:\r\n//  * - `QueuexSwitch` (`[qxSwitch]`) – the container directive controlling the switch context.\r\n//  * - `QueuexSwitchCase` (`*qxSwitchCase`) – defines conditional views based on case values.\r\n//  * - `QueuexSwitchDefault` (`*qxSwitchDefault`) – defines the fallback view when no case matches.\r\n//  *\r\n//  * Compared to Angular’s `NgSwitch`, the Queuex version provides:\r\n//  * - **Lazy view creation** using the concurrent scheduler from `ng-queuex/core`.\r\n//  * - **Detachment from Angular’s logical tree** for each embedded view.\r\n//  * - **Isolated reactive contexts** allowing direct signals in templates\r\n//  *   to trigger independent, fine-grained change detection.\r\n//  *\r\n//  * @usageNotes\r\n//  * Import `QueuexSwitchModule` into your feature module to make the directives available:\r\n//  *\r\n//  * ```ts\r\n//  * @NgModule({\r\n//  *   imports: [CommonModule, QueuexSwitchModule],\r\n//  *   declarations: [MyComponent]\r\n//  * })\r\n//  * export class MyFeatureModule {}\r\n//  * ```\r\n//  *\r\n//  * @example\r\n//  * ```html\r\n//  * <div [qxSwitch]=\"status\">\r\n//  *   <p *qxSwitchCase=\"'loading'\">Loading...</p>\r\n//  *   <p *qxSwitchCase=\"'success'\">Loaded ✅</p>\r\n//  *   <p *qxSwitchDefault>Unknown state 🤔</p>\r\n//  * </div>\r\n//  * ```\r\n//  *\r\n//  * @class\r\n//  * @name QueuexSwitchModule\r\n//  */\r\n// @NgModule({\r\n//   imports: imports,\r\n//   exports: imports,\r\n// })\r\n// export class QueuexSwitchModule {}\r\n\r\nfunction throwQxSwitchProviderNotFoundError(attrName: string, directiveName: string): never {\r\n  throw new Error(\r\n    `An element with the \"${attrName}\" attribute ` +\r\n    `(matching the \"${directiveName}\" directive) must be located inside an element with the \"qxSwitch\" attribute ` +\r\n    `(matching \"QueuexSwitch\" directive)`,\r\n  );\r\n}\r\n","import { isPlatformServer } from \"@angular/common\";\r\nimport { Directive, inject, OnDestroy, PLATFORM_ID, TemplateRef, ViewContainerRef, ViewRef } from \"@angular/core\";\r\nimport { createWatch, Watch } from \"@angular/core/primitives/signals\";\r\nimport { AbortTaskFunction, scheduleChangeDetection, detectChangesSync, onTaskExecuted, isInConcurrentTaskContext, assertNgQueuexIntegrated } from \"@ng-queuex/core\";\r\n\r\n/**\r\n * @Directive QueuexWatch\r\n *\r\n * `QueuexWatch` is a lightweight structural directive designed for highly efficient, fine-grained property bindings on DOM elements.\r\n * It is particularly suited for cases where only a small number of bindings are required (e.g. one or two element properties).\r\n *\r\n * Unlike traditional bindings, `QueuexWatch` immediately creates its embedded view, detaching it from Angular’s logical\r\n * tree and assigning it a dedicated reactive context. This design ensures that change detection runs independently from the host\r\n * component or Angular’s global cycles.\r\n *\r\n * Change detection is triggered as quickly as possible, using one of the following strategies depending on the current runtime state:\r\n * - `onTaskExecuted(listener: VoidFunction)` hook, if a Task is currently running,\r\n * - otherwise, a concurrent scheduler with the highest priority.\r\n *\r\n * This makes `QueuexWatch` ideal for scenarios where reactive signals are used in detached components (`ChangeDetectorRef#detach()`),\r\n * and where binding directly to element properties results in a more elegant and performant solution.\r\n *\r\n * @example\r\n * ```html\r\n * <!-- Detached component with reactive signals -->\r\n * <span *watch textContent=\"personName()\"></span>\r\n *\r\n * <!-- Multiple properties can be bound if needed -->\r\n * <input\r\n *   *watch\r\n *   [value]=\"personName()\"\r\n *   [title]=\"personAge() + ' years old'\"\r\n * />\r\n * ```\r\n *\r\n * ### Server side fallback\r\n *\r\n * On the server side, QueuexWatch is fully transparent and falls back to standard Angular property bindings, ensuring predictable SSR output without any additional overhead.\r\n *\r\n */\r\n@Directive({ selector: 'ng-template[watch]', standalone: true })\r\nexport class QueuexWatch implements OnDestroy {\r\n  private _viewRef: ViewRef | null = null;\r\n  private _watcher: Watch | null = null;\r\n  private _abortTask: AbortTaskFunction | null = null;\r\n  private _vcRef = inject(ViewContainerRef);\r\n  private _tmpRef = inject(TemplateRef);\r\n  private _destroyed = false;\r\n  private _scheduled = false;\r\n\r\n  constructor() {\r\n    assertNgQueuexIntegrated('[watch]: Assertion failed! \"@ng-queuex/core\" not provided.');\r\n    if (isPlatformServer(inject(PLATFORM_ID))) {\r\n      this._vcRef.createEmbeddedView(this._tmpRef);\r\n    } else {\r\n      this._watcher = createWatch(\r\n        () => this._runEffect(),\r\n        () => this._scheduleEffect(),\r\n        false\r\n      );\r\n      this._watcher.notify();\r\n      this._watcher.run();\r\n    }\r\n  }\r\n\r\n\r\n  ngOnDestroy(): void {\r\n    this._destroyed = true;\r\n    this._abortTask?.();\r\n    this._watcher?.destroy();\r\n  }\r\n\r\n  private _runEffect(): void {\r\n    if (!this._viewRef) {\r\n      this._viewRef = this._vcRef.createEmbeddedView(this._tmpRef);\r\n      this._viewRef.detach();\r\n    }\r\n    detectChangesSync(this._viewRef);\r\n    this._scheduled = false;\r\n  }\r\n\r\n  private _scheduleEffect(): void {\r\n    if (this._scheduled) { return; }\r\n    this._scheduled = true;\r\n\r\n    if (this._viewRef) {\r\n      if (isInConcurrentTaskContext()) {\r\n        if (this._destroyed) { return; }\r\n        onTaskExecuted(() => this._watcher!.run())\r\n      } else {\r\n        this._abortTask = scheduleChangeDetection(\r\n          () => this._watcher!.run(),\r\n          1,\r\n          this._viewRef\r\n        );\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { QueuexIf } from \"./if/if.directive\";\r\nimport { QueuexForOf } from \"./for/for.directive\";\r\nimport { QueuexSwitch, QueuexSwitchCase, QueuexSwitchDefault } from \"./switch/switch.directive\";\r\nimport { QueuexReactiveView } from \"./reactive_view/reactive_view\";\r\nimport { QueuexLazyView } from \"./lazy_view/lazy_view\";\r\nimport { QueuexWatch } from \"./watch/watch.directive\";\r\nimport { NgForOf } from \"@angular/common\";\r\n\r\nexport {\r\n  QueuexForOf,\r\n  provideQueuexForOfDefaultPriority\r\n} from './for/for.directive';\r\nexport type {\r\n  Num,\r\n  Flatten,\r\n  KeysToUse,\r\n  PrefixedKeys,\r\n  TrackBy,\r\n  QueuexForOfInput,\r\n  QueuexForOfContext,\r\n} from './for/for.directive';\r\nexport {\r\n  QueuexIf,\r\n  QueuexIfContext,\r\n  provideQueuexIfDefaultPriority\r\n} from './if/if.directive';\r\nexport {\r\n  QueuexLazyView\r\n} from './lazy_view/lazy_view';\r\nexport {\r\n  QueuexReactiveView,\r\n  provideQueuexReactiveViewDefaultPriority\r\n} from './reactive_view/reactive_view';\r\nexport {\r\n  QueuexSwitch,\r\n  QueuexSwitchCase,\r\n  QueuexSwitchDefault,\r\n  // QueuexSwitchModule,\r\n  provideQueuexSwitchDefaultPriority\r\n} from './switch/switch.directive';\r\nexport {\r\n  QueuexWatch\r\n} from './watch/watch.directive';\r\n\r\n// const imports = [\r\n//   QueuexIf,\r\n//   QueuexForOf,\r\n//   QueuexSwitch,\r\n//   QueuexSwitchCase,\r\n//   QueuexSwitchDefault,\r\n//   QueuexReactiveView,\r\n//   QueuexLazyView,\r\n//   QueuexWatch\r\n// ];\r\n\r\n// @NgModule({\r\n//   imports: imports,\r\n//   exports: imports\r\n// })\r\n// export class QueuexTemplateModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["ɵmarkForRefresh"],"mappings":"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"}